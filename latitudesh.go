// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package latitudeshgosdk

// Generated from OpenAPI doc version 2023-06-01 and generator version 2.623.0

import (
	"context"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/config"
	"github.com/latitudesh/latitudesh-go-sdk/internal/hooks"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
	"github.com/latitudesh/latitudesh-go-sdk/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.latitude.sh",
	"http://api.latitude.sh",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// Latitudesh - Latitude.sh API: The Latitude.sh API is a RESTful API to manage your Latitude.sh account. It allows you to perform the same actions as the Latitude.sh dashboard.
type Latitudesh struct {
	SDKVersion       string
	APIKeys          *APIKeys
	Billing          *Billing
	Events           *Events
	Firewalls        *Firewalls
	IPAddresses      *IPAddresses
	Teams            *Teams
	TeamMembers      *TeamMembers
	TeamsMembers     *TeamsMembers
	OperatingSystems *OperatingSystems
	Plans            *Plans
	Projects         *Projects
	Regions          *Regions
	Roles            *Roles
	Servers          *Servers
	SSHKeys          *SSHKeys
	Storage          *Storage
	Tags             *Tags
	Traffic          *Traffic
	UserData         *UserData
	ProjectsUserData *ProjectsUserData
	UserProfile      *UserProfile
	VirtualMachines  *VirtualMachines
	PrivateNetworks  *PrivateNetworks
	VirtualNetworks  *VirtualNetworks
	VPNSessions      *VPNSessions

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*Latitudesh)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Latitudesh) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Latitudesh) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *Latitudesh) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithLatitudeAPIKey allows setting the latitude_api_key variable for url substitution
func WithLatitudeAPIKey(latitudeAPIKey string) SDKOption {
	return func(sdk *Latitudesh) {
		for idx := range sdk.sdkConfiguration.ServerVariables {
			if _, ok := sdk.sdkConfiguration.ServerVariables[idx]["latitude_api_key"]; !ok {
				continue
			}

			sdk.sdkConfiguration.ServerVariables[idx]["latitude_api_key"] = fmt.Sprintf("%v", latitudeAPIKey)
		}
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Latitudesh) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(bearer string) SDKOption {
	return func(sdk *Latitudesh) {
		security := components.Security{Bearer: &bearer}
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(&security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *Latitudesh) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Latitudesh) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Latitudesh) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Latitudesh {
	sdk := &Latitudesh{
		SDKVersion: "1.4.0",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 1.4.0 2.623.0 2023-06-01 github.com/latitudesh/latitudesh-go-sdk",
			ServerList: ServerList,
			ServerVariables: []map[string]string{
				{
					"latitude_api_key": "<insert your api key here>",
				},
				{
					"latitude_api_key": "<insert your api key here>",
				},
			},
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if currentServerURL != serverURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.APIKeys = newAPIKeys(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Billing = newBilling(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Events = newEvents(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Firewalls = newFirewalls(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.IPAddresses = newIPAddresses(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Teams = newTeams(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.TeamMembers = newTeamMembers(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.TeamsMembers = newTeamsMembers(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.OperatingSystems = newOperatingSystems(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Plans = newPlans(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Projects = newProjects(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Regions = newRegions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Roles = newRoles(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Servers = newServers(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.SSHKeys = newSSHKeys(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Storage = newStorage(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Tags = newTags(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Traffic = newTraffic(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.UserData = newUserData(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.ProjectsUserData = newProjectsUserData(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.UserProfile = newUserProfile(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.VirtualMachines = newVirtualMachines(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PrivateNetworks = newPrivateNetworks(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.VirtualNetworks = newVirtualNetworks(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.VPNSessions = newVPNSessions(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
