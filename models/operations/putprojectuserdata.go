// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PutProjectUserDataUserDataType string

const (
	PutProjectUserDataUserDataTypeUserData PutProjectUserDataUserDataType = "user_data"
)

func (e PutProjectUserDataUserDataType) ToPointer() *PutProjectUserDataUserDataType {
	return &e
}
func (e *PutProjectUserDataUserDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_data":
		*e = PutProjectUserDataUserDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutProjectUserDataUserDataType: %v", v)
	}
}

type PutProjectUserDataUserDataAttributes struct {
	// description dummy user data
	Description *string `json:"description,omitempty"`
	// encoded content of the User Data
	Content *string `json:"content,omitempty"`
}

func (p *PutProjectUserDataUserDataAttributes) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PutProjectUserDataUserDataAttributes) GetContent() *string {
	if p == nil {
		return nil
	}
	return p.Content
}

type PutProjectUserDataUserDataData struct {
	ID         string                                `json:"id"`
	Type       PutProjectUserDataUserDataType        `json:"type"`
	Attributes *PutProjectUserDataUserDataAttributes `json:"attributes,omitempty"`
}

func (p *PutProjectUserDataUserDataData) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PutProjectUserDataUserDataData) GetType() PutProjectUserDataUserDataType {
	if p == nil {
		return PutProjectUserDataUserDataType("")
	}
	return p.Type
}

func (p *PutProjectUserDataUserDataData) GetAttributes() *PutProjectUserDataUserDataAttributes {
	if p == nil {
		return nil
	}
	return p.Attributes
}

type PutProjectUserDataUserDataRequestBody struct {
	Data PutProjectUserDataUserDataData `json:"data"`
}

func (p *PutProjectUserDataUserDataRequestBody) GetData() PutProjectUserDataUserDataData {
	if p == nil {
		return PutProjectUserDataUserDataData{}
	}
	return p.Data
}

type PutProjectUserDataRequest struct {
	// Project ID or Slug
	ProjectID   string                                 `pathParam:"style=simple,explode=false,name=project_id"`
	UserDataID  string                                 `pathParam:"style=simple,explode=false,name=user_data_id"`
	RequestBody *PutProjectUserDataUserDataRequestBody `request:"mediaType=application/json"`
}

func (p *PutProjectUserDataRequest) GetProjectID() string {
	if p == nil {
		return ""
	}
	return p.ProjectID
}

func (p *PutProjectUserDataRequest) GetUserDataID() string {
	if p == nil {
		return ""
	}
	return p.UserDataID
}

func (p *PutProjectUserDataRequest) GetRequestBody() *PutProjectUserDataUserDataRequestBody {
	if p == nil {
		return nil
	}
	return p.RequestBody
}

type PutProjectUserDataResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	UserData *components.UserData
}

func (p *PutProjectUserDataResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}

func (p *PutProjectUserDataResponse) GetUserData() *components.UserData {
	if p == nil {
		return nil
	}
	return p.UserData
}
