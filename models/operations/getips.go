// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

// FilterFamily - The protocol family to filter by
type FilterFamily string

const (
	FilterFamilyIPv4 FilterFamily = "IPv4"
	FilterFamilyIPv6 FilterFamily = "IPv6"
)

func (e FilterFamily) ToPointer() *FilterFamily {
	return &e
}
func (e *FilterFamily) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IPv4":
		fallthrough
	case "IPv6":
		*e = FilterFamily(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterFamily: %v", v)
	}
}

// FilterType - The protocol type to filter by
type FilterType string

const (
	FilterTypePrivate FilterType = "private"
	FilterTypePublic  FilterType = "public"
)

func (e FilterType) ToPointer() *FilterType {
	return &e
}
func (e *FilterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private":
		fallthrough
	case "public":
		*e = FilterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterType: %v", v)
	}
}

type GetIpsRequest struct {
	// The server ID to filter by
	FilterServer *string `queryParam:"style=form,explode=true,name=filter[server]"`
	// The project ID or Slug to filter by
	FilterProject *string `queryParam:"style=form,explode=true,name=filter[project]"`
	// The protocol family to filter by
	FilterFamily *FilterFamily `queryParam:"style=form,explode=true,name=filter[family]"`
	// The protocol type to filter by
	FilterType *FilterType `queryParam:"style=form,explode=true,name=filter[type]"`
	// The site slug to filter by
	FilterLocation *string `queryParam:"style=form,explode=true,name=filter[location]"`
	// The address of IP to filter by starts_with
	FilterAddress *string `queryParam:"style=form,explode=true,name=filter[address]"`
	// The `region` and `server` are provided as extra attributes that are lazy loaded. To request it, just set `extra_fields[ip_addresses]=region,server` in the query string.
	ExtraFieldsIPAddresses *string `queryParam:"style=form,explode=true,name=extra_fields[ip_addresses]"`
	// Number of items to return per page
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page[size]"`
	// Page number to return (starts at 1)
	PageNumber *int64 `default:"1" queryParam:"style=form,explode=true,name=page[number]"`
}

func (g GetIpsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetIpsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (g *GetIpsRequest) GetFilterServer() *string {
	if g == nil {
		return nil
	}
	return g.FilterServer
}

func (g *GetIpsRequest) GetFilterProject() *string {
	if g == nil {
		return nil
	}
	return g.FilterProject
}

func (g *GetIpsRequest) GetFilterFamily() *FilterFamily {
	if g == nil {
		return nil
	}
	return g.FilterFamily
}

func (g *GetIpsRequest) GetFilterType() *FilterType {
	if g == nil {
		return nil
	}
	return g.FilterType
}

func (g *GetIpsRequest) GetFilterLocation() *string {
	if g == nil {
		return nil
	}
	return g.FilterLocation
}

func (g *GetIpsRequest) GetFilterAddress() *string {
	if g == nil {
		return nil
	}
	return g.FilterAddress
}

func (g *GetIpsRequest) GetExtraFieldsIPAddresses() *string {
	if g == nil {
		return nil
	}
	return g.ExtraFieldsIPAddresses
}

func (g *GetIpsRequest) GetPageSize() *int64 {
	if g == nil {
		return nil
	}
	return g.PageSize
}

func (g *GetIpsRequest) GetPageNumber() *int64 {
	if g == nil {
		return nil
	}
	return g.PageNumber
}

type GetIpsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	IPAddresses *components.IPAddresses

	Next func() (*GetIpsResponse, error)
}

func (g *GetIpsResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GetIpsResponse) GetIPAddresses() *components.IPAddresses {
	if g == nil {
		return nil
	}
	return g.IPAddresses
}
