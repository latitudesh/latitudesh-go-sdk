// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type FilterLocation string

const (
	FilterLocationAsh  FilterLocation = "ASH"
	FilterLocationBgt  FilterLocation = "BGT"
	FilterLocationBue  FilterLocation = "BUE"
	FilterLocationChi  FilterLocation = "CHI"
	FilterLocationDal  FilterLocation = "DAL"
	FilterLocationFra  FilterLocation = "FRA"
	FilterLocationLax  FilterLocation = "LAX"
	FilterLocationLon  FilterLocation = "LON"
	FilterLocationMex  FilterLocation = "MEX"
	FilterLocationMex2 FilterLocation = "MEX2"
	FilterLocationMia  FilterLocation = "MIA"
	FilterLocationMia2 FilterLocation = "MIA2"
	FilterLocationNyc  FilterLocation = "NYC"
	FilterLocationSan  FilterLocation = "SAN"
	FilterLocationSao  FilterLocation = "SAO"
	FilterLocationSao2 FilterLocation = "SAO2"
	FilterLocationSyd  FilterLocation = "SYD"
	FilterLocationTyo  FilterLocation = "TYO"
	FilterLocationTyo2 FilterLocation = "TYO2"
)

func (e FilterLocation) ToPointer() *FilterLocation {
	return &e
}
func (e *FilterLocation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASH":
		fallthrough
	case "BGT":
		fallthrough
	case "BUE":
		fallthrough
	case "CHI":
		fallthrough
	case "DAL":
		fallthrough
	case "FRA":
		fallthrough
	case "LAX":
		fallthrough
	case "LON":
		fallthrough
	case "MEX":
		fallthrough
	case "MEX2":
		fallthrough
	case "MIA":
		fallthrough
	case "MIA2":
		fallthrough
	case "NYC":
		fallthrough
	case "SAN":
		fallthrough
	case "SAO":
		fallthrough
	case "SAO2":
		fallthrough
	case "SYD":
		fallthrough
	case "TYO":
		fallthrough
	case "TYO2":
		*e = FilterLocation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterLocation: %v", v)
	}
}

type GetVpnSessionsRequest struct {
	FilterLocation *FilterLocation `queryParam:"style=form,explode=true,name=filter[location]"`
}

func (o *GetVpnSessionsRequest) GetFilterLocation() *FilterLocation {
	if o == nil {
		return nil
	}
	return o.FilterLocation
}

type Meta struct {
}

// GetVpnSessionsResponseBody - Success
type GetVpnSessionsResponseBody struct {
	Data []components.VpnSessionDataWithPassword `json:"data,omitempty"`
	Meta *Meta                                   `json:"meta,omitempty"`
}

func (o *GetVpnSessionsResponseBody) GetData() []components.VpnSessionDataWithPassword {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *GetVpnSessionsResponseBody) GetMeta() *Meta {
	if o == nil {
		return nil
	}
	return o.Meta
}

type GetVpnSessionsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetVpnSessionsResponseBody
}

func (o *GetVpnSessionsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetVpnSessionsResponse) GetObject() *GetVpnSessionsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
