// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type UpdateVirtualNetworkPrivateNetworksType string

const (
	UpdateVirtualNetworkPrivateNetworksTypeVirtualNetworks UpdateVirtualNetworkPrivateNetworksType = "virtual_networks"
)

func (e UpdateVirtualNetworkPrivateNetworksType) ToPointer() *UpdateVirtualNetworkPrivateNetworksType {
	return &e
}
func (e *UpdateVirtualNetworkPrivateNetworksType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "virtual_networks":
		*e = UpdateVirtualNetworkPrivateNetworksType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateVirtualNetworkPrivateNetworksType: %v", v)
	}
}

type UpdateVirtualNetworkPrivateNetworksAttributes struct {
	Tags        []string `json:"tags,omitempty"`
	Description *string  `default:"Test virtual network update" json:"description"`
}

func (u UpdateVirtualNetworkPrivateNetworksAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateVirtualNetworkPrivateNetworksAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateVirtualNetworkPrivateNetworksAttributes) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UpdateVirtualNetworkPrivateNetworksAttributes) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type UpdateVirtualNetworkPrivateNetworksData struct {
	Type       UpdateVirtualNetworkPrivateNetworksType        `json:"type"`
	Attributes *UpdateVirtualNetworkPrivateNetworksAttributes `json:"attributes,omitempty"`
}

func (o *UpdateVirtualNetworkPrivateNetworksData) GetType() UpdateVirtualNetworkPrivateNetworksType {
	if o == nil {
		return UpdateVirtualNetworkPrivateNetworksType("")
	}
	return o.Type
}

func (o *UpdateVirtualNetworkPrivateNetworksData) GetAttributes() *UpdateVirtualNetworkPrivateNetworksAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type UpdateVirtualNetworkPrivateNetworksRequestBody struct {
	ID   *string                                 `default:"vlan_81EVOtR1N4J2Z" json:"id"`
	Data UpdateVirtualNetworkPrivateNetworksData `json:"data"`
}

func (u UpdateVirtualNetworkPrivateNetworksRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateVirtualNetworkPrivateNetworksRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateVirtualNetworkPrivateNetworksRequestBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateVirtualNetworkPrivateNetworksRequestBody) GetData() UpdateVirtualNetworkPrivateNetworksData {
	if o == nil {
		return UpdateVirtualNetworkPrivateNetworksData{}
	}
	return o.Data
}

type UpdateVirtualNetworkRequest struct {
	// The Virtual Network ID
	VlanID      string                                         `pathParam:"style=simple,explode=false,name=vlan_id"`
	RequestBody UpdateVirtualNetworkPrivateNetworksRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateVirtualNetworkRequest) GetVlanID() string {
	if o == nil {
		return ""
	}
	return o.VlanID
}

func (o *UpdateVirtualNetworkRequest) GetRequestBody() UpdateVirtualNetworkPrivateNetworksRequestBody {
	if o == nil {
		return UpdateVirtualNetworkPrivateNetworksRequestBody{}
	}
	return o.RequestBody
}

type UpdateVirtualNetworkResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	VirtualNetwork *components.VirtualNetwork
}

func (o *UpdateVirtualNetworkResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateVirtualNetworkResponse) GetVirtualNetwork() *components.VirtualNetwork {
	if o == nil {
		return nil
	}
	return o.VirtualNetwork
}
