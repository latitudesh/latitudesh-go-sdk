// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PatchUserDataUserDataType string

const (
	PatchUserDataUserDataTypeUserData PatchUserDataUserDataType = "user_data"
)

func (e PatchUserDataUserDataType) ToPointer() *PatchUserDataUserDataType {
	return &e
}
func (e *PatchUserDataUserDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_data":
		*e = PatchUserDataUserDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchUserDataUserDataType: %v", v)
	}
}

type PatchUserDataUserDataAttributes struct {
	// description dummy user data
	Description *string `json:"description,omitempty"`
	// encoded content of the User Data
	Content *string `json:"content,omitempty"`
}

func (p *PatchUserDataUserDataAttributes) GetDescription() *string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *PatchUserDataUserDataAttributes) GetContent() *string {
	if p == nil {
		return nil
	}
	return p.Content
}

type PatchUserDataUserDataData struct {
	ID         string                           `json:"id"`
	Type       PatchUserDataUserDataType        `json:"type"`
	Attributes *PatchUserDataUserDataAttributes `json:"attributes,omitempty"`
}

func (p *PatchUserDataUserDataData) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PatchUserDataUserDataData) GetType() PatchUserDataUserDataType {
	if p == nil {
		return PatchUserDataUserDataType("")
	}
	return p.Type
}

func (p *PatchUserDataUserDataData) GetAttributes() *PatchUserDataUserDataAttributes {
	if p == nil {
		return nil
	}
	return p.Attributes
}

type PatchUserDataUserDataRequestBody struct {
	Data PatchUserDataUserDataData `json:"data"`
}

func (p *PatchUserDataUserDataRequestBody) GetData() PatchUserDataUserDataData {
	if p == nil {
		return PatchUserDataUserDataData{}
	}
	return p.Data
}

type PatchUserDataRequest struct {
	UserDataID  string                            `pathParam:"style=simple,explode=false,name=user_data_id"`
	RequestBody *PatchUserDataUserDataRequestBody `request:"mediaType=application/json"`
}

func (p *PatchUserDataRequest) GetUserDataID() string {
	if p == nil {
		return ""
	}
	return p.UserDataID
}

func (p *PatchUserDataRequest) GetRequestBody() *PatchUserDataUserDataRequestBody {
	if p == nil {
		return nil
	}
	return p.RequestBody
}

type PatchUserDataResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	UserData *components.UserData
}

func (p *PatchUserDataResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}

func (p *PatchUserDataResponse) GetUserData() *components.UserData {
	if p == nil {
		return nil
	}
	return p.UserData
}
