// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type CreateFirewallType string

const (
	CreateFirewallTypeFirewalls CreateFirewallType = "firewalls"
)

func (e CreateFirewallType) ToPointer() *CreateFirewallType {
	return &e
}
func (e *CreateFirewallType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "firewalls":
		*e = CreateFirewallType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFirewallType: %v", v)
	}
}

type CreateFirewallProtocol string

const (
	CreateFirewallProtocolTCP CreateFirewallProtocol = "TCP"
	CreateFirewallProtocolUDP CreateFirewallProtocol = "UDP"
)

func (e CreateFirewallProtocol) ToPointer() *CreateFirewallProtocol {
	return &e
}
func (e *CreateFirewallProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TCP":
		fallthrough
	case "UDP":
		*e = CreateFirewallProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateFirewallProtocol: %v", v)
	}
}

type CreateFirewallRules struct {
	From     *string                 `json:"from,omitempty"`
	To       *string                 `json:"to,omitempty"`
	Protocol *CreateFirewallProtocol `json:"protocol,omitempty"`
	// Port number or range (e.g., "80", "80-443")
	Port *string `json:"port,omitempty"`
}

func (o *CreateFirewallRules) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *CreateFirewallRules) GetTo() *string {
	if o == nil {
		return nil
	}
	return o.To
}

func (o *CreateFirewallRules) GetProtocol() *CreateFirewallProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *CreateFirewallRules) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

type CreateFirewallAttributes struct {
	Name    string                `json:"name"`
	Project string                `json:"project"`
	Rules   []CreateFirewallRules `json:"rules,omitempty"`
}

func (o *CreateFirewallAttributes) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateFirewallAttributes) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *CreateFirewallAttributes) GetRules() []CreateFirewallRules {
	if o == nil {
		return nil
	}
	return o.Rules
}

type CreateFirewallData struct {
	Type       CreateFirewallType        `json:"type"`
	Attributes *CreateFirewallAttributes `json:"attributes,omitempty"`
}

func (o *CreateFirewallData) GetType() CreateFirewallType {
	if o == nil {
		return CreateFirewallType("")
	}
	return o.Type
}

func (o *CreateFirewallData) GetAttributes() *CreateFirewallAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type CreateFirewallFirewallsRequestBody struct {
	Data CreateFirewallData `json:"data"`
}

func (o *CreateFirewallFirewallsRequestBody) GetData() CreateFirewallData {
	if o == nil {
		return CreateFirewallData{}
	}
	return o.Data
}

type CreateFirewallResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Firewall *components.Firewall
}

func (o *CreateFirewallResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateFirewallResponse) GetFirewall() *components.Firewall {
	if o == nil {
		return nil
	}
	return o.Firewall
}
