// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PostVpnSessionVpnSessionsType string

const (
	PostVpnSessionVpnSessionsTypeVpnSessions PostVpnSessionVpnSessionsType = "vpn_sessions"
)

func (e PostVpnSessionVpnSessionsType) ToPointer() *PostVpnSessionVpnSessionsType {
	return &e
}
func (e *PostVpnSessionVpnSessionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vpn_sessions":
		*e = PostVpnSessionVpnSessionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostVpnSessionVpnSessionsType: %v", v)
	}
}

type PostVpnSessionVpnSessionsSite string

const (
	PostVpnSessionVpnSessionsSiteAsh  PostVpnSessionVpnSessionsSite = "ASH"
	PostVpnSessionVpnSessionsSiteBgt  PostVpnSessionVpnSessionsSite = "BGT"
	PostVpnSessionVpnSessionsSiteBue  PostVpnSessionVpnSessionsSite = "BUE"
	PostVpnSessionVpnSessionsSiteChi  PostVpnSessionVpnSessionsSite = "CHI"
	PostVpnSessionVpnSessionsSiteDal  PostVpnSessionVpnSessionsSite = "DAL"
	PostVpnSessionVpnSessionsSiteFra  PostVpnSessionVpnSessionsSite = "FRA"
	PostVpnSessionVpnSessionsSiteLax  PostVpnSessionVpnSessionsSite = "LAX"
	PostVpnSessionVpnSessionsSiteLon  PostVpnSessionVpnSessionsSite = "LON"
	PostVpnSessionVpnSessionsSiteMex  PostVpnSessionVpnSessionsSite = "MEX"
	PostVpnSessionVpnSessionsSiteMex2 PostVpnSessionVpnSessionsSite = "MEX2"
	PostVpnSessionVpnSessionsSiteMia  PostVpnSessionVpnSessionsSite = "MIA"
	PostVpnSessionVpnSessionsSiteMia2 PostVpnSessionVpnSessionsSite = "MIA2"
	PostVpnSessionVpnSessionsSiteNyc  PostVpnSessionVpnSessionsSite = "NYC"
	PostVpnSessionVpnSessionsSiteSan  PostVpnSessionVpnSessionsSite = "SAN"
	PostVpnSessionVpnSessionsSiteSao  PostVpnSessionVpnSessionsSite = "SAO"
	PostVpnSessionVpnSessionsSiteSao2 PostVpnSessionVpnSessionsSite = "SAO2"
	PostVpnSessionVpnSessionsSiteSyd  PostVpnSessionVpnSessionsSite = "SYD"
	PostVpnSessionVpnSessionsSiteTyo  PostVpnSessionVpnSessionsSite = "TYO"
	PostVpnSessionVpnSessionsSiteTyo2 PostVpnSessionVpnSessionsSite = "TYO2"
)

func (e PostVpnSessionVpnSessionsSite) ToPointer() *PostVpnSessionVpnSessionsSite {
	return &e
}
func (e *PostVpnSessionVpnSessionsSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASH":
		fallthrough
	case "BGT":
		fallthrough
	case "BUE":
		fallthrough
	case "CHI":
		fallthrough
	case "DAL":
		fallthrough
	case "FRA":
		fallthrough
	case "LAX":
		fallthrough
	case "LON":
		fallthrough
	case "MEX":
		fallthrough
	case "MEX2":
		fallthrough
	case "MIA":
		fallthrough
	case "MIA2":
		fallthrough
	case "NYC":
		fallthrough
	case "SAN":
		fallthrough
	case "SAO":
		fallthrough
	case "SAO2":
		fallthrough
	case "SYD":
		fallthrough
	case "TYO":
		fallthrough
	case "TYO2":
		*e = PostVpnSessionVpnSessionsSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostVpnSessionVpnSessionsSite: %v", v)
	}
}

type PostVpnSessionVpnSessionsAttributes struct {
	Site     *PostVpnSessionVpnSessionsSite `json:"site,omitempty"`
	ServerID *string                        `json:"server_id,omitempty"`
}

func (p *PostVpnSessionVpnSessionsAttributes) GetSite() *PostVpnSessionVpnSessionsSite {
	if p == nil {
		return nil
	}
	return p.Site
}

func (p *PostVpnSessionVpnSessionsAttributes) GetServerID() *string {
	if p == nil {
		return nil
	}
	return p.ServerID
}

type PostVpnSessionVpnSessionsData struct {
	Type       *PostVpnSessionVpnSessionsType       `json:"type,omitempty"`
	Attributes *PostVpnSessionVpnSessionsAttributes `json:"attributes,omitempty"`
}

func (p *PostVpnSessionVpnSessionsData) GetType() *PostVpnSessionVpnSessionsType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PostVpnSessionVpnSessionsData) GetAttributes() *PostVpnSessionVpnSessionsAttributes {
	if p == nil {
		return nil
	}
	return p.Attributes
}

type PostVpnSessionVpnSessionsRequestBody struct {
	Data *PostVpnSessionVpnSessionsData `json:"data,omitempty"`
}

func (p *PostVpnSessionVpnSessionsRequestBody) GetData() *PostVpnSessionVpnSessionsData {
	if p == nil {
		return nil
	}
	return p.Data
}

type PostVpnSessionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Created
	VpnSessionWithPassword *components.VpnSessionWithPassword
}

func (p *PostVpnSessionResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}

func (p *PostVpnSessionResponse) GetVpnSessionWithPassword() *components.VpnSessionWithPassword {
	if p == nil {
		return nil
	}
	return p.VpnSessionWithPassword
}
