// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PostVPNSessionVPNSessionsType string

const (
	PostVPNSessionVPNSessionsTypeVpnSessions PostVPNSessionVPNSessionsType = "vpn_sessions"
)

func (e PostVPNSessionVPNSessionsType) ToPointer() *PostVPNSessionVPNSessionsType {
	return &e
}
func (e *PostVPNSessionVPNSessionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vpn_sessions":
		*e = PostVPNSessionVPNSessionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostVPNSessionVPNSessionsType: %v", v)
	}
}

type PostVPNSessionVPNSessionsSite string

const (
	PostVPNSessionVPNSessionsSiteAsh  PostVPNSessionVPNSessionsSite = "ASH"
	PostVPNSessionVPNSessionsSiteBgt  PostVPNSessionVPNSessionsSite = "BGT"
	PostVPNSessionVPNSessionsSiteBue  PostVPNSessionVPNSessionsSite = "BUE"
	PostVPNSessionVPNSessionsSiteChi  PostVPNSessionVPNSessionsSite = "CHI"
	PostVPNSessionVPNSessionsSiteDal  PostVPNSessionVPNSessionsSite = "DAL"
	PostVPNSessionVPNSessionsSiteFra  PostVPNSessionVPNSessionsSite = "FRA"
	PostVPNSessionVPNSessionsSiteLax  PostVPNSessionVPNSessionsSite = "LAX"
	PostVPNSessionVPNSessionsSiteLon  PostVPNSessionVPNSessionsSite = "LON"
	PostVPNSessionVPNSessionsSiteMex  PostVPNSessionVPNSessionsSite = "MEX"
	PostVPNSessionVPNSessionsSiteMex2 PostVPNSessionVPNSessionsSite = "MEX2"
	PostVPNSessionVPNSessionsSiteMia  PostVPNSessionVPNSessionsSite = "MIA"
	PostVPNSessionVPNSessionsSiteMia2 PostVPNSessionVPNSessionsSite = "MIA2"
	PostVPNSessionVPNSessionsSiteNyc  PostVPNSessionVPNSessionsSite = "NYC"
	PostVPNSessionVPNSessionsSiteSan  PostVPNSessionVPNSessionsSite = "SAN"
	PostVPNSessionVPNSessionsSiteSao  PostVPNSessionVPNSessionsSite = "SAO"
	PostVPNSessionVPNSessionsSiteSao2 PostVPNSessionVPNSessionsSite = "SAO2"
	PostVPNSessionVPNSessionsSiteSyd  PostVPNSessionVPNSessionsSite = "SYD"
	PostVPNSessionVPNSessionsSiteTyo  PostVPNSessionVPNSessionsSite = "TYO"
	PostVPNSessionVPNSessionsSiteTyo2 PostVPNSessionVPNSessionsSite = "TYO2"
)

func (e PostVPNSessionVPNSessionsSite) ToPointer() *PostVPNSessionVPNSessionsSite {
	return &e
}
func (e *PostVPNSessionVPNSessionsSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASH":
		fallthrough
	case "BGT":
		fallthrough
	case "BUE":
		fallthrough
	case "CHI":
		fallthrough
	case "DAL":
		fallthrough
	case "FRA":
		fallthrough
	case "LAX":
		fallthrough
	case "LON":
		fallthrough
	case "MEX":
		fallthrough
	case "MEX2":
		fallthrough
	case "MIA":
		fallthrough
	case "MIA2":
		fallthrough
	case "NYC":
		fallthrough
	case "SAN":
		fallthrough
	case "SAO":
		fallthrough
	case "SAO2":
		fallthrough
	case "SYD":
		fallthrough
	case "TYO":
		fallthrough
	case "TYO2":
		*e = PostVPNSessionVPNSessionsSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostVPNSessionVPNSessionsSite: %v", v)
	}
}

type PostVPNSessionVPNSessionsAttributes struct {
	Site     *PostVPNSessionVPNSessionsSite `json:"site,omitempty"`
	ServerID *string                        `json:"server_id,omitempty"`
}

func (o *PostVPNSessionVPNSessionsAttributes) GetSite() *PostVPNSessionVPNSessionsSite {
	if o == nil {
		return nil
	}
	return o.Site
}

func (o *PostVPNSessionVPNSessionsAttributes) GetServerID() *string {
	if o == nil {
		return nil
	}
	return o.ServerID
}

type PostVPNSessionVPNSessionsData struct {
	Type       *PostVPNSessionVPNSessionsType       `json:"type,omitempty"`
	Attributes *PostVPNSessionVPNSessionsAttributes `json:"attributes,omitempty"`
}

func (o *PostVPNSessionVPNSessionsData) GetType() *PostVPNSessionVPNSessionsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PostVPNSessionVPNSessionsData) GetAttributes() *PostVPNSessionVPNSessionsAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type PostVPNSessionVPNSessionsRequestBody struct {
	Data *PostVPNSessionVPNSessionsData `json:"data,omitempty"`
}

func (o *PostVPNSessionVPNSessionsRequestBody) GetData() *PostVPNSessionVPNSessionsData {
	if o == nil {
		return nil
	}
	return o.Data
}

type PostVpnSessionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Created
	VpnSessionWithPassword *components.VpnSessionWithPassword
}

func (o *PostVpnSessionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *PostVpnSessionResponse) GetVpnSessionWithPassword() *components.VpnSessionWithPassword {
	if o == nil {
		return nil
	}
	return o.VpnSessionWithPassword
}
