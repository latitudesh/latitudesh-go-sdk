// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type CreateVirtualMachineActionVirtualMachinesType string

const (
	CreateVirtualMachineActionVirtualMachinesTypeVirtualMachines CreateVirtualMachineActionVirtualMachinesType = "virtual_machines"
)

func (e CreateVirtualMachineActionVirtualMachinesType) ToPointer() *CreateVirtualMachineActionVirtualMachinesType {
	return &e
}
func (e *CreateVirtualMachineActionVirtualMachinesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "virtual_machines":
		*e = CreateVirtualMachineActionVirtualMachinesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVirtualMachineActionVirtualMachinesType: %v", v)
	}
}

// CreateVirtualMachineActionVirtualMachinesAction - The action to perform on the virtual machine
type CreateVirtualMachineActionVirtualMachinesAction string

const (
	CreateVirtualMachineActionVirtualMachinesActionPowerOn  CreateVirtualMachineActionVirtualMachinesAction = "power_on"
	CreateVirtualMachineActionVirtualMachinesActionPowerOff CreateVirtualMachineActionVirtualMachinesAction = "power_off"
	CreateVirtualMachineActionVirtualMachinesActionReboot   CreateVirtualMachineActionVirtualMachinesAction = "reboot"
)

func (e CreateVirtualMachineActionVirtualMachinesAction) ToPointer() *CreateVirtualMachineActionVirtualMachinesAction {
	return &e
}
func (e *CreateVirtualMachineActionVirtualMachinesAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "power_on":
		fallthrough
	case "power_off":
		fallthrough
	case "reboot":
		*e = CreateVirtualMachineActionVirtualMachinesAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateVirtualMachineActionVirtualMachinesAction: %v", v)
	}
}

type CreateVirtualMachineActionVirtualMachinesAttributes struct {
	// The action to perform on the virtual machine
	Action CreateVirtualMachineActionVirtualMachinesAction `json:"action"`
}

func (c *CreateVirtualMachineActionVirtualMachinesAttributes) GetAction() CreateVirtualMachineActionVirtualMachinesAction {
	if c == nil {
		return CreateVirtualMachineActionVirtualMachinesAction("")
	}
	return c.Action
}

type CreateVirtualMachineActionVirtualMachinesRequestBody struct {
	ID         string                                              `json:"id"`
	Type       CreateVirtualMachineActionVirtualMachinesType       `json:"type"`
	Attributes CreateVirtualMachineActionVirtualMachinesAttributes `json:"attributes"`
}

func (c *CreateVirtualMachineActionVirtualMachinesRequestBody) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CreateVirtualMachineActionVirtualMachinesRequestBody) GetType() CreateVirtualMachineActionVirtualMachinesType {
	if c == nil {
		return CreateVirtualMachineActionVirtualMachinesType("")
	}
	return c.Type
}

func (c *CreateVirtualMachineActionVirtualMachinesRequestBody) GetAttributes() CreateVirtualMachineActionVirtualMachinesAttributes {
	if c == nil {
		return CreateVirtualMachineActionVirtualMachinesAttributes{}
	}
	return c.Attributes
}

type CreateVirtualMachineActionRequest struct {
	VirtualMachineID string                                               `pathParam:"style=simple,explode=false,name=virtual_machine_id"`
	RequestBody      CreateVirtualMachineActionVirtualMachinesRequestBody `request:"mediaType=application/json"`
}

func (c *CreateVirtualMachineActionRequest) GetVirtualMachineID() string {
	if c == nil {
		return ""
	}
	return c.VirtualMachineID
}

func (c *CreateVirtualMachineActionRequest) GetRequestBody() CreateVirtualMachineActionVirtualMachinesRequestBody {
	if c == nil {
		return CreateVirtualMachineActionVirtualMachinesRequestBody{}
	}
	return c.RequestBody
}

type CreateVirtualMachineActionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (c *CreateVirtualMachineActionResponse) GetHTTPMeta() components.HTTPMetadata {
	if c == nil {
		return components.HTTPMetadata{}
	}
	return c.HTTPMeta
}
