// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type UpdateServerDeployConfigServersType string

const (
	UpdateServerDeployConfigServersTypeDeployConfig UpdateServerDeployConfigServersType = "deploy_config"
)

func (e UpdateServerDeployConfigServersType) ToPointer() *UpdateServerDeployConfigServersType {
	return &e
}
func (e *UpdateServerDeployConfigServersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deploy_config":
		*e = UpdateServerDeployConfigServersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerDeployConfigServersType: %v", v)
	}
}

type UpdateServerDeployConfigServersOperatingSystem string

const (
	UpdateServerDeployConfigServersOperatingSystemIpxe                      UpdateServerDeployConfigServersOperatingSystem = "ipxe"
	UpdateServerDeployConfigServersOperatingSystemWindowsServer2019StdV1    UpdateServerDeployConfigServersOperatingSystem = "windows_server_2019_std_v1"
	UpdateServerDeployConfigServersOperatingSystemUbuntu2204X64Lts          UpdateServerDeployConfigServersOperatingSystem = "ubuntu_22_04_x64_lts"
	UpdateServerDeployConfigServersOperatingSystemDebian11                  UpdateServerDeployConfigServersOperatingSystem = "debian_11"
	UpdateServerDeployConfigServersOperatingSystemDebian10                  UpdateServerDeployConfigServersOperatingSystem = "debian_10"
	UpdateServerDeployConfigServersOperatingSystemRhel8                     UpdateServerDeployConfigServersOperatingSystem = "rhel8"
	UpdateServerDeployConfigServersOperatingSystemWindowsServer2012R2StdV28 UpdateServerDeployConfigServersOperatingSystem = "windows_server_2012_r2_std_v28"
	UpdateServerDeployConfigServersOperatingSystemWindowsServer2012R2DcV5   UpdateServerDeployConfigServersOperatingSystem = "windows_server_2012_r2_dc_v5"
	UpdateServerDeployConfigServersOperatingSystemEsxi67                    UpdateServerDeployConfigServersOperatingSystem = "esxi_6_7"
	UpdateServerDeployConfigServersOperatingSystemDebian94X64               UpdateServerDeployConfigServersOperatingSystem = "debian_9_4_x64"
	UpdateServerDeployConfigServersOperatingSystemCentos74X64               UpdateServerDeployConfigServersOperatingSystem = "centos_7_4_x64"
	UpdateServerDeployConfigServersOperatingSystemCentos8X64                UpdateServerDeployConfigServersOperatingSystem = "centos_8_x64"
	UpdateServerDeployConfigServersOperatingSystemUbuntu1604X64Lts          UpdateServerDeployConfigServersOperatingSystem = "ubuntu_16_04_x64_lts"
	UpdateServerDeployConfigServersOperatingSystemUbuntu2004X64Lts          UpdateServerDeployConfigServersOperatingSystem = "ubuntu_20_04_x64_lts"
	UpdateServerDeployConfigServersOperatingSystemWindowsServer2016StdV1    UpdateServerDeployConfigServersOperatingSystem = "windows_server_2016_std_v1"
	UpdateServerDeployConfigServersOperatingSystemWindowsServer2016DcV1     UpdateServerDeployConfigServersOperatingSystem = "windows_server_2016_dc_v1"
	UpdateServerDeployConfigServersOperatingSystemWindowsServer2019DcV1     UpdateServerDeployConfigServersOperatingSystem = "windows_server_2019_dc_v1"
	UpdateServerDeployConfigServersOperatingSystemDebian12                  UpdateServerDeployConfigServersOperatingSystem = "debian_12"
	UpdateServerDeployConfigServersOperatingSystemUbuntu22MlInABox          UpdateServerDeployConfigServersOperatingSystem = "ubuntu22_ml_in_a_box"
	UpdateServerDeployConfigServersOperatingSystemUbuntu1804X64Lts          UpdateServerDeployConfigServersOperatingSystem = "ubuntu_18_04_x64_lts"
	UpdateServerDeployConfigServersOperatingSystemWindowsServer2019StdUefi  UpdateServerDeployConfigServersOperatingSystem = "windows_server_2019_std_uefi"
	UpdateServerDeployConfigServersOperatingSystemWindows2022StdUefi        UpdateServerDeployConfigServersOperatingSystem = "windows_2022_std_uefi"
	UpdateServerDeployConfigServersOperatingSystemWindows2022Std            UpdateServerDeployConfigServersOperatingSystem = "windows_2022_std"
	UpdateServerDeployConfigServersOperatingSystemUbuntu2404X64Lts          UpdateServerDeployConfigServersOperatingSystem = "ubuntu_24_04_x64_lts"
	UpdateServerDeployConfigServersOperatingSystemRockylinux8               UpdateServerDeployConfigServersOperatingSystem = "rockylinux_8"
)

func (e UpdateServerDeployConfigServersOperatingSystem) ToPointer() *UpdateServerDeployConfigServersOperatingSystem {
	return &e
}
func (e *UpdateServerDeployConfigServersOperatingSystem) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipxe":
		fallthrough
	case "windows_server_2019_std_v1":
		fallthrough
	case "ubuntu_22_04_x64_lts":
		fallthrough
	case "debian_11":
		fallthrough
	case "debian_10":
		fallthrough
	case "rhel8":
		fallthrough
	case "windows_server_2012_r2_std_v28":
		fallthrough
	case "windows_server_2012_r2_dc_v5":
		fallthrough
	case "esxi_6_7":
		fallthrough
	case "debian_9_4_x64":
		fallthrough
	case "centos_7_4_x64":
		fallthrough
	case "centos_8_x64":
		fallthrough
	case "ubuntu_16_04_x64_lts":
		fallthrough
	case "ubuntu_20_04_x64_lts":
		fallthrough
	case "windows_server_2016_std_v1":
		fallthrough
	case "windows_server_2016_dc_v1":
		fallthrough
	case "windows_server_2019_dc_v1":
		fallthrough
	case "debian_12":
		fallthrough
	case "ubuntu22_ml_in_a_box":
		fallthrough
	case "ubuntu_18_04_x64_lts":
		fallthrough
	case "windows_server_2019_std_uefi":
		fallthrough
	case "windows_2022_std_uefi":
		fallthrough
	case "windows_2022_std":
		fallthrough
	case "ubuntu_24_04_x64_lts":
		fallthrough
	case "rockylinux_8":
		*e = UpdateServerDeployConfigServersOperatingSystem(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerDeployConfigServersOperatingSystem: %v", v)
	}
}

type UpdateServerDeployConfigServersRaid string

const (
	UpdateServerDeployConfigServersRaidRaid0 UpdateServerDeployConfigServersRaid = "raid-0"
	UpdateServerDeployConfigServersRaidRaid1 UpdateServerDeployConfigServersRaid = "raid-1"
)

func (e UpdateServerDeployConfigServersRaid) ToPointer() *UpdateServerDeployConfigServersRaid {
	return &e
}
func (e *UpdateServerDeployConfigServersRaid) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "raid-0":
		fallthrough
	case "raid-1":
		*e = UpdateServerDeployConfigServersRaid(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerDeployConfigServersRaid: %v", v)
	}
}

type UpdateServerDeployConfigPartitions struct {
	SizeInGb       *int64  `json:"size_in_gb,omitempty"`
	Path           *string `json:"path,omitempty"`
	FilesystemType *string `json:"filesystem_type,omitempty"`
}

func (u *UpdateServerDeployConfigPartitions) GetSizeInGb() *int64 {
	if u == nil {
		return nil
	}
	return u.SizeInGb
}

func (u *UpdateServerDeployConfigPartitions) GetPath() *string {
	if u == nil {
		return nil
	}
	return u.Path
}

func (u *UpdateServerDeployConfigPartitions) GetFilesystemType() *string {
	if u == nil {
		return nil
	}
	return u.FilesystemType
}

type UpdateServerDeployConfigServersAttributes struct {
	Hostname        *string                                         `json:"hostname,omitempty"`
	OperatingSystem *UpdateServerDeployConfigServersOperatingSystem `json:"operating_system,omitempty"`
	Raid            *UpdateServerDeployConfigServersRaid            `json:"raid,omitempty"`
	// User data to configure the server
	UserData   *string                              `json:"user_data,omitempty"`
	SSHKeys    []string                             `json:"ssh_keys,omitempty"`
	Partitions []UpdateServerDeployConfigPartitions `json:"partitions,omitempty"`
	// URL where iPXE script is stored on, necessary for custom image deployments. This attribute is required when operating system iPXE is selected.
	IpxeURL *string `json:"ipxe_url,omitempty"`
}

func (u *UpdateServerDeployConfigServersAttributes) GetHostname() *string {
	if u == nil {
		return nil
	}
	return u.Hostname
}

func (u *UpdateServerDeployConfigServersAttributes) GetOperatingSystem() *UpdateServerDeployConfigServersOperatingSystem {
	if u == nil {
		return nil
	}
	return u.OperatingSystem
}

func (u *UpdateServerDeployConfigServersAttributes) GetRaid() *UpdateServerDeployConfigServersRaid {
	if u == nil {
		return nil
	}
	return u.Raid
}

func (u *UpdateServerDeployConfigServersAttributes) GetUserData() *string {
	if u == nil {
		return nil
	}
	return u.UserData
}

func (u *UpdateServerDeployConfigServersAttributes) GetSSHKeys() []string {
	if u == nil {
		return nil
	}
	return u.SSHKeys
}

func (u *UpdateServerDeployConfigServersAttributes) GetPartitions() []UpdateServerDeployConfigPartitions {
	if u == nil {
		return nil
	}
	return u.Partitions
}

func (u *UpdateServerDeployConfigServersAttributes) GetIpxeURL() *string {
	if u == nil {
		return nil
	}
	return u.IpxeURL
}

type UpdateServerDeployConfigServersRequestBody struct {
	Type       UpdateServerDeployConfigServersType        `json:"type"`
	Attributes *UpdateServerDeployConfigServersAttributes `json:"attributes,omitempty"`
}

func (u *UpdateServerDeployConfigServersRequestBody) GetType() UpdateServerDeployConfigServersType {
	if u == nil {
		return UpdateServerDeployConfigServersType("")
	}
	return u.Type
}

func (u *UpdateServerDeployConfigServersRequestBody) GetAttributes() *UpdateServerDeployConfigServersAttributes {
	if u == nil {
		return nil
	}
	return u.Attributes
}

type UpdateServerDeployConfigRequest struct {
	// The Server ID
	ServerID    string                                     `pathParam:"style=simple,explode=false,name=server_id"`
	RequestBody UpdateServerDeployConfigServersRequestBody `request:"mediaType=application/json"`
}

func (u *UpdateServerDeployConfigRequest) GetServerID() string {
	if u == nil {
		return ""
	}
	return u.ServerID
}

func (u *UpdateServerDeployConfigRequest) GetRequestBody() UpdateServerDeployConfigServersRequestBody {
	if u == nil {
		return UpdateServerDeployConfigServersRequestBody{}
	}
	return u.RequestBody
}

type UpdateServerDeployConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	DeployConfig *components.DeployConfig
}

func (u *UpdateServerDeployConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if u == nil {
		return components.HTTPMetadata{}
	}
	return u.HTTPMeta
}

func (u *UpdateServerDeployConfigResponse) GetDeployConfig() *components.DeployConfig {
	if u == nil {
		return nil
	}
	return u.DeployConfig
}
