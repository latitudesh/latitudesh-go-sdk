// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type UpdateProjectProjectsType string

const (
	UpdateProjectProjectsTypeProjects UpdateProjectProjectsType = "projects"
)

func (e UpdateProjectProjectsType) ToPointer() *UpdateProjectProjectsType {
	return &e
}
func (e *UpdateProjectProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "projects":
		*e = UpdateProjectProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsType: %v", v)
	}
}

type UpdateProjectProjectsEnvironment string

const (
	UpdateProjectProjectsEnvironmentDevelopment UpdateProjectProjectsEnvironment = "Development"
	UpdateProjectProjectsEnvironmentStaging     UpdateProjectProjectsEnvironment = "Staging"
	UpdateProjectProjectsEnvironmentProduction  UpdateProjectProjectsEnvironment = "Production"
)

func (e UpdateProjectProjectsEnvironment) ToPointer() *UpdateProjectProjectsEnvironment {
	return &e
}
func (e *UpdateProjectProjectsEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Development":
		fallthrough
	case "Staging":
		fallthrough
	case "Production":
		*e = UpdateProjectProjectsEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProjectsEnvironment: %v", v)
	}
}

type UpdateProjectProjectsAttributes struct {
	Name           *string                           `default:"A brand new name for the virtual network" json:"name"`
	Description    *string                           `default:"A brand new description for the virtual network" json:"description"`
	Environment    *UpdateProjectProjectsEnvironment `json:"environment,omitempty"`
	BandwidthAlert *bool                             `default:"false" json:"bandwidth_alert"`
	Tags           []string                          `json:"tags,omitempty"`
}

func (u UpdateProjectProjectsAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateProjectProjectsAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateProjectProjectsAttributes) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectProjectsAttributes) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateProjectProjectsAttributes) GetEnvironment() *UpdateProjectProjectsEnvironment {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *UpdateProjectProjectsAttributes) GetBandwidthAlert() *bool {
	if o == nil {
		return nil
	}
	return o.BandwidthAlert
}

func (o *UpdateProjectProjectsAttributes) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

type UpdateProjectProjectsData struct {
	ID         *string                          `default:"proj_81EVOtR1N4J2Z" json:"id"`
	Type       UpdateProjectProjectsType        `json:"type"`
	Attributes *UpdateProjectProjectsAttributes `json:"attributes,omitempty"`
}

func (u UpdateProjectProjectsData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateProjectProjectsData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateProjectProjectsData) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateProjectProjectsData) GetType() UpdateProjectProjectsType {
	if o == nil {
		return UpdateProjectProjectsType("")
	}
	return o.Type
}

func (o *UpdateProjectProjectsData) GetAttributes() *UpdateProjectProjectsAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type UpdateProjectProjectsRequestBody struct {
	Data UpdateProjectProjectsData `json:"data"`
}

func (o *UpdateProjectProjectsRequestBody) GetData() UpdateProjectProjectsData {
	if o == nil {
		return UpdateProjectProjectsData{}
	}
	return o.Data
}

type UpdateProjectRequest struct {
	// The project ID or Slug
	ProjectID   string                            `pathParam:"style=simple,explode=false,name=project_id"`
	RequestBody *UpdateProjectProjectsRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateProjectRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectRequest) GetRequestBody() *UpdateProjectProjectsRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdateProjectResponseBody - Success
type UpdateProjectResponseBody struct {
	Data *components.Project `json:"data,omitempty"`
}

func (o *UpdateProjectResponseBody) GetData() *components.Project {
	if o == nil {
		return nil
	}
	return o.Data
}

type UpdateProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *UpdateProjectResponseBody
}

func (o *UpdateProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateProjectResponse) GetObject() *UpdateProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
