// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PatchCurrentTeamTeamsType string

const (
	PatchCurrentTeamTeamsTypeTeams PatchCurrentTeamTeamsType = "teams"
)

func (e PatchCurrentTeamTeamsType) ToPointer() *PatchCurrentTeamTeamsType {
	return &e
}
func (e *PatchCurrentTeamTeamsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "teams":
		*e = PatchCurrentTeamTeamsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchCurrentTeamTeamsType: %v", v)
	}
}

type PatchCurrentTeamTeamsCurrency string

const (
	PatchCurrentTeamTeamsCurrencyUsd PatchCurrentTeamTeamsCurrency = "USD"
	PatchCurrentTeamTeamsCurrencyBrl PatchCurrentTeamTeamsCurrency = "BRL"
)

func (e PatchCurrentTeamTeamsCurrency) ToPointer() *PatchCurrentTeamTeamsCurrency {
	return &e
}
func (e *PatchCurrentTeamTeamsCurrency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "USD":
		fallthrough
	case "BRL":
		*e = PatchCurrentTeamTeamsCurrency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchCurrentTeamTeamsCurrency: %v", v)
	}
}

type PatchCurrentTeamTeamsAttributes struct {
	Address      *string                        `json:"address,omitempty"`
	Name         *string                        `json:"name,omitempty"`
	Currency     *PatchCurrentTeamTeamsCurrency `default:"USD" json:"currency"`
	ReferredCode *string                        `json:"referred_code,omitempty"`
}

func (p PatchCurrentTeamTeamsAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PatchCurrentTeamTeamsAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PatchCurrentTeamTeamsAttributes) GetAddress() *string {
	if p == nil {
		return nil
	}
	return p.Address
}

func (p *PatchCurrentTeamTeamsAttributes) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PatchCurrentTeamTeamsAttributes) GetCurrency() *PatchCurrentTeamTeamsCurrency {
	if p == nil {
		return nil
	}
	return p.Currency
}

func (p *PatchCurrentTeamTeamsAttributes) GetReferredCode() *string {
	if p == nil {
		return nil
	}
	return p.ReferredCode
}

type PatchCurrentTeamTeamsData struct {
	ID         string                           `json:"id"`
	Type       PatchCurrentTeamTeamsType        `json:"type"`
	Attributes *PatchCurrentTeamTeamsAttributes `json:"attributes,omitempty"`
}

func (p *PatchCurrentTeamTeamsData) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PatchCurrentTeamTeamsData) GetType() PatchCurrentTeamTeamsType {
	if p == nil {
		return PatchCurrentTeamTeamsType("")
	}
	return p.Type
}

func (p *PatchCurrentTeamTeamsData) GetAttributes() *PatchCurrentTeamTeamsAttributes {
	if p == nil {
		return nil
	}
	return p.Attributes
}

type PatchCurrentTeamTeamsRequestBody struct {
	Data PatchCurrentTeamTeamsData `json:"data"`
}

func (p *PatchCurrentTeamTeamsRequestBody) GetData() PatchCurrentTeamTeamsData {
	if p == nil {
		return PatchCurrentTeamTeamsData{}
	}
	return p.Data
}

type PatchCurrentTeamRequest struct {
	TeamID      string                           `pathParam:"style=simple,explode=false,name=team_id"`
	RequestBody PatchCurrentTeamTeamsRequestBody `request:"mediaType=application/json"`
}

func (p *PatchCurrentTeamRequest) GetTeamID() string {
	if p == nil {
		return ""
	}
	return p.TeamID
}

func (p *PatchCurrentTeamRequest) GetRequestBody() PatchCurrentTeamTeamsRequestBody {
	if p == nil {
		return PatchCurrentTeamTeamsRequestBody{}
	}
	return p.RequestBody
}

// PatchCurrentTeamResponseBody - Success
type PatchCurrentTeamResponseBody struct {
	Data *components.Team `json:"data,omitempty"`
}

func (p *PatchCurrentTeamResponseBody) GetData() *components.Team {
	if p == nil {
		return nil
	}
	return p.Data
}

type PatchCurrentTeamResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *PatchCurrentTeamResponseBody
}

func (p *PatchCurrentTeamResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}

func (p *PatchCurrentTeamResponse) GetObject() *PatchCurrentTeamResponseBody {
	if p == nil {
		return nil
	}
	return p.Object
}
