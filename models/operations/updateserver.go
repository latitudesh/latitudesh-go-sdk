// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type UpdateServerServersType string

const (
	UpdateServerServersTypeServers UpdateServerServersType = "servers"
)

func (e UpdateServerServersType) ToPointer() *UpdateServerServersType {
	return &e
}
func (e *UpdateServerServersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "servers":
		*e = UpdateServerServersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerServersType: %v", v)
	}
}

// UpdateServerServersBilling - The server billing type. Accepts `hourly` and `monthly` for on demand projects and `yearly` for reserved projects.
type UpdateServerServersBilling string

const (
	UpdateServerServersBillingHourly  UpdateServerServersBilling = "hourly"
	UpdateServerServersBillingMonthly UpdateServerServersBilling = "monthly"
	UpdateServerServersBillingYearly  UpdateServerServersBilling = "yearly"
)

func (e UpdateServerServersBilling) ToPointer() *UpdateServerServersBilling {
	return &e
}
func (e *UpdateServerServersBilling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hourly":
		fallthrough
	case "monthly":
		fallthrough
	case "yearly":
		*e = UpdateServerServersBilling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerServersBilling: %v", v)
	}
}

type UpdateServerServersAttributes struct {
	Hostname *string `default:"new-hostname" json:"hostname"`
	// The server billing type. Accepts `hourly` and `monthly` for on demand projects and `yearly` for reserved projects.
	Billing *UpdateServerServersBilling `json:"billing,omitempty"`
	// List of Tag IDs
	Tags []string `json:"tags,omitempty"`
	// Project ID or slug to move the server to
	Project *string `json:"project,omitempty"`
}

func (u UpdateServerServersAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateServerServersAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerServersAttributes) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *UpdateServerServersAttributes) GetBilling() *UpdateServerServersBilling {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *UpdateServerServersAttributes) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UpdateServerServersAttributes) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

type UpdateServerServersData struct {
	ID         *string                        `default:"sv_81EVOtR1N4J2Z" json:"id"`
	Type       *UpdateServerServersType       `json:"type,omitempty"`
	Attributes *UpdateServerServersAttributes `json:"attributes,omitempty"`
}

func (u UpdateServerServersData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateServerServersData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerServersData) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateServerServersData) GetType() *UpdateServerServersType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateServerServersData) GetAttributes() *UpdateServerServersAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type UpdateServerServersRequestBody struct {
	Data *UpdateServerServersData `json:"data,omitempty"`
}

func (o *UpdateServerServersRequestBody) GetData() *UpdateServerServersData {
	if o == nil {
		return nil
	}
	return o.Data
}

type UpdateServerRequest struct {
	ServerID    string                         `pathParam:"style=simple,explode=false,name=server_id"`
	RequestBody UpdateServerServersRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateServerRequest) GetServerID() string {
	if o == nil {
		return ""
	}
	return o.ServerID
}

func (o *UpdateServerRequest) GetRequestBody() UpdateServerServersRequestBody {
	if o == nil {
		return UpdateServerServersRequestBody{}
	}
	return o.RequestBody
}

type UpdateServerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Server *components.Server
}

func (o *UpdateServerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateServerResponse) GetServer() *components.Server {
	if o == nil {
		return nil
	}
	return o.Server
}
