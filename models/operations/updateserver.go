// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type UpdateServerServersRequestType string

const (
	UpdateServerServersRequestTypeServers UpdateServerServersRequestType = "servers"
)

func (e UpdateServerServersRequestType) ToPointer() *UpdateServerServersRequestType {
	return &e
}
func (e *UpdateServerServersRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "servers":
		*e = UpdateServerServersRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerServersRequestType: %v", v)
	}
}

type UpdateServerServersRequestBilling string

const (
	UpdateServerServersRequestBillingHourly  UpdateServerServersRequestBilling = "hourly"
	UpdateServerServersRequestBillingMonthly UpdateServerServersRequestBilling = "monthly"
	UpdateServerServersRequestBillingYearly  UpdateServerServersRequestBilling = "yearly"
)

func (e UpdateServerServersRequestBilling) ToPointer() *UpdateServerServersRequestBilling {
	return &e
}
func (e *UpdateServerServersRequestBilling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hourly":
		fallthrough
	case "monthly":
		fallthrough
	case "yearly":
		*e = UpdateServerServersRequestBilling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerServersRequestBilling: %v", v)
	}
}

type UpdateServerServersRequestAttributes struct {
	Hostname *string                            `default:"new-hostname" json:"hostname"`
	Billing  *UpdateServerServersRequestBilling `json:"billing,omitempty"`
	Tags     []string                           `json:"tags,omitempty"`
	Project  *string                            `json:"project,omitempty"`
}

func (u UpdateServerServersRequestAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateServerServersRequestAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerServersRequestAttributes) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *UpdateServerServersRequestAttributes) GetBilling() *UpdateServerServersRequestBilling {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *UpdateServerServersRequestAttributes) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UpdateServerServersRequestAttributes) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

type UpdateServerServersRequestApplicationJSONType string

const (
	UpdateServerServersRequestApplicationJSONTypeServers UpdateServerServersRequestApplicationJSONType = "servers"
)

func (e UpdateServerServersRequestApplicationJSONType) ToPointer() *UpdateServerServersRequestApplicationJSONType {
	return &e
}
func (e *UpdateServerServersRequestApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "servers":
		*e = UpdateServerServersRequestApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerServersRequestApplicationJSONType: %v", v)
	}
}

type UpdateServerServersRequestApplicationJSONBilling string

const (
	UpdateServerServersRequestApplicationJSONBillingHourly  UpdateServerServersRequestApplicationJSONBilling = "hourly"
	UpdateServerServersRequestApplicationJSONBillingMonthly UpdateServerServersRequestApplicationJSONBilling = "monthly"
	UpdateServerServersRequestApplicationJSONBillingYearly  UpdateServerServersRequestApplicationJSONBilling = "yearly"
)

func (e UpdateServerServersRequestApplicationJSONBilling) ToPointer() *UpdateServerServersRequestApplicationJSONBilling {
	return &e
}
func (e *UpdateServerServersRequestApplicationJSONBilling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hourly":
		fallthrough
	case "monthly":
		fallthrough
	case "yearly":
		*e = UpdateServerServersRequestApplicationJSONBilling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateServerServersRequestApplicationJSONBilling: %v", v)
	}
}

type UpdateServerServersRequestApplicationJSONAttributes struct {
	Hostname *string                                           `default:"new-hostname" json:"hostname"`
	Billing  *UpdateServerServersRequestApplicationJSONBilling `json:"billing",omitempty`
	Tags     []string                                          `json:"tags,omitempty"`
	Project  *string                                           `json:"project,omitempty"`
}

func (u UpdateServerServersRequestApplicationJSONAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateServerServersRequestApplicationJSONAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerServersRequestApplicationJSONAttributes) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *UpdateServerServersRequestApplicationJSONAttributes) GetBilling() *UpdateServerServersRequestApplicationJSONBilling {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *UpdateServerServersRequestApplicationJSONAttributes) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *UpdateServerServersRequestApplicationJSONAttributes) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

type UpdateServerServersData struct {
	ID         *string                                              `default:"sv_81EVOtR1N4J2Z" json:"id"`
	Type       *UpdateServerServersRequestApplicationJSONType       `json:"type,omitempty"`
	Attributes *UpdateServerServersRequestApplicationJSONAttributes `json:"attributes,omitempty"`
}

func (u UpdateServerServersData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateServerServersData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerServersData) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateServerServersData) GetType() *UpdateServerServersRequestApplicationJSONType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateServerServersData) GetAttributes() *UpdateServerServersRequestApplicationJSONAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type UpdateServerServersRequestBody struct {
	ID         *string                               `default:"sv_81EVOtR1N4J2Z" json:"id"`
	Type       *UpdateServerServersRequestType       `json:"type,omitempty"`
	Attributes *UpdateServerServersRequestAttributes `json:"attributes,omitempty"`
	Data       *UpdateServerServersData              `json:"data,omitempty"`
}

func (u UpdateServerServersRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateServerServersRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateServerServersRequestBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateServerServersRequestBody) GetType() *UpdateServerServersRequestType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateServerServersRequestBody) GetAttributes() *UpdateServerServersRequestAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *UpdateServerServersRequestBody) GetData() *UpdateServerServersData {
	if o == nil {
		return nil
	}
	return o.Data
}

type UpdateServerRequest struct {
	ServerID    string                         `pathParam:"style=simple,explode=false,name=server_id"`
	RequestBody UpdateServerServersRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateServerRequest) GetServerID() string {
	if o == nil {
		return ""
	}
	return o.ServerID
}

func (o *UpdateServerRequest) GetRequestBody() UpdateServerServersRequestBody {
	if o == nil {
		return UpdateServerServersRequestBody{}
	}
	return o.RequestBody
}

type UpdateServerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdateServerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
