// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type CreateServerServersType string

const (
	CreateServerServersTypeServers CreateServerServersType = "servers"
)

func (e CreateServerServersType) ToPointer() *CreateServerServersType {
	return &e
}
func (e *CreateServerServersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "servers":
		*e = CreateServerServersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerServersType: %v", v)
	}
}

// CreateServerPlan - The plan to choose server from
type CreateServerPlan string

const (
	CreateServerPlanC2LargeX86  CreateServerPlan = "c2-large-x86"
	CreateServerPlanC2MediumX86 CreateServerPlan = "c2-medium-x86"
	CreateServerPlanC2SmallX86  CreateServerPlan = "c2-small-x86"
	CreateServerPlanC3LargeX86  CreateServerPlan = "c3-large-x86"
	CreateServerPlanC3MediumX86 CreateServerPlan = "c3-medium-x86"
	CreateServerPlanC3SmallX86  CreateServerPlan = "c3-small-x86"
	CreateServerPlanC3XlargeX86 CreateServerPlan = "c3-xlarge-x86"
	CreateServerPlanG3LargeX86  CreateServerPlan = "g3-large-x86"
	CreateServerPlanG3MediumX86 CreateServerPlan = "g3-medium-x86"
	CreateServerPlanG3SmallX86  CreateServerPlan = "g3-small-x86"
	CreateServerPlanG3XlargeX86 CreateServerPlan = "g3-xlarge-x86"
	CreateServerPlanM3LargeX86  CreateServerPlan = "m3-large-x86"
	CreateServerPlanS2SmallX86  CreateServerPlan = "s2-small-x86"
	CreateServerPlanS3LargeX86  CreateServerPlan = "s3-large-x86"
)

func (e CreateServerPlan) ToPointer() *CreateServerPlan {
	return &e
}
func (e *CreateServerPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "c2-large-x86":
		fallthrough
	case "c2-medium-x86":
		fallthrough
	case "c2-small-x86":
		fallthrough
	case "c3-large-x86":
		fallthrough
	case "c3-medium-x86":
		fallthrough
	case "c3-small-x86":
		fallthrough
	case "c3-xlarge-x86":
		fallthrough
	case "g3-large-x86":
		fallthrough
	case "g3-medium-x86":
		fallthrough
	case "g3-small-x86":
		fallthrough
	case "g3-xlarge-x86":
		fallthrough
	case "m3-large-x86":
		fallthrough
	case "s2-small-x86":
		fallthrough
	case "s3-large-x86":
		*e = CreateServerPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerPlan: %v", v)
	}
}

// CreateServerSite - The site to deploy the server
type CreateServerSite string

const (
	CreateServerSiteAsh  CreateServerSite = "ASH"
	CreateServerSiteBgt  CreateServerSite = "BGT"
	CreateServerSiteBue  CreateServerSite = "BUE"
	CreateServerSiteChi  CreateServerSite = "CHI"
	CreateServerSiteDal  CreateServerSite = "DAL"
	CreateServerSiteFra  CreateServerSite = "FRA"
	CreateServerSiteLax  CreateServerSite = "LAX"
	CreateServerSiteLon  CreateServerSite = "LON"
	CreateServerSiteMex  CreateServerSite = "MEX"
	CreateServerSiteMex2 CreateServerSite = "MEX2"
	CreateServerSiteMia  CreateServerSite = "MIA"
	CreateServerSiteMia2 CreateServerSite = "MIA2"
	CreateServerSiteNyc  CreateServerSite = "NYC"
	CreateServerSiteSan  CreateServerSite = "SAN"
	CreateServerSiteSao  CreateServerSite = "SAO"
	CreateServerSiteSao2 CreateServerSite = "SAO2"
	CreateServerSiteSyd  CreateServerSite = "SYD"
	CreateServerSiteTyo  CreateServerSite = "TYO"
	CreateServerSiteTyo2 CreateServerSite = "TYO2"
)

func (e CreateServerSite) ToPointer() *CreateServerSite {
	return &e
}
func (e *CreateServerSite) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASH":
		fallthrough
	case "BGT":
		fallthrough
	case "BUE":
		fallthrough
	case "CHI":
		fallthrough
	case "DAL":
		fallthrough
	case "FRA":
		fallthrough
	case "LAX":
		fallthrough
	case "LON":
		fallthrough
	case "MEX":
		fallthrough
	case "MEX2":
		fallthrough
	case "MIA":
		fallthrough
	case "MIA2":
		fallthrough
	case "NYC":
		fallthrough
	case "SAN":
		fallthrough
	case "SAO":
		fallthrough
	case "SAO2":
		fallthrough
	case "SYD":
		fallthrough
	case "TYO":
		fallthrough
	case "TYO2":
		*e = CreateServerSite(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerSite: %v", v)
	}
}

// CreateServerOperatingSystem - The operating system for the new server
type CreateServerOperatingSystem string

const (
	CreateServerOperatingSystemIpxe                      CreateServerOperatingSystem = "ipxe"
	CreateServerOperatingSystemWindowsServer2019StdV1    CreateServerOperatingSystem = "windows_server_2019_std_v1"
	CreateServerOperatingSystemUbuntu2204X64Lts          CreateServerOperatingSystem = "ubuntu_22_04_x64_lts"
	CreateServerOperatingSystemDebian11                  CreateServerOperatingSystem = "debian_11"
	CreateServerOperatingSystemDebian10                  CreateServerOperatingSystem = "debian_10"
	CreateServerOperatingSystemRhel8                     CreateServerOperatingSystem = "rhel8"
	CreateServerOperatingSystemWindowsServer2012R2StdV28 CreateServerOperatingSystem = "windows_server_2012_r2_std_v28"
	CreateServerOperatingSystemWindowsServer2012R2DcV5   CreateServerOperatingSystem = "windows_server_2012_r2_dc_v5"
	CreateServerOperatingSystemEsxi67                    CreateServerOperatingSystem = "esxi_6_7"
	CreateServerOperatingSystemDebian94X64               CreateServerOperatingSystem = "debian_9_4_x64"
	CreateServerOperatingSystemCentos74X64               CreateServerOperatingSystem = "centos_7_4_x64"
	CreateServerOperatingSystemCentos8X64                CreateServerOperatingSystem = "centos_8_x64"
	CreateServerOperatingSystemUbuntu1604X64Lts          CreateServerOperatingSystem = "ubuntu_16_04_x64_lts"
	CreateServerOperatingSystemUbuntu2004X64Lts          CreateServerOperatingSystem = "ubuntu_20_04_x64_lts"
	CreateServerOperatingSystemWindowsServer2016StdV1    CreateServerOperatingSystem = "windows_server_2016_std_v1"
	CreateServerOperatingSystemWindowsServer2016DcV1     CreateServerOperatingSystem = "windows_server_2016_dc_v1"
	CreateServerOperatingSystemWindowsServer2019DcV1     CreateServerOperatingSystem = "windows_server_2019_dc_v1"
	CreateServerOperatingSystemDebian12                  CreateServerOperatingSystem = "debian_12"
	CreateServerOperatingSystemUbuntu22MlInABox          CreateServerOperatingSystem = "ubuntu22_ml_in_a_box"
	CreateServerOperatingSystemUbuntu1804X64Lts          CreateServerOperatingSystem = "ubuntu_18_04_x64_lts"
	CreateServerOperatingSystemWindowsServer2019StdUefi  CreateServerOperatingSystem = "windows_server_2019_std_uefi"
	CreateServerOperatingSystemWindows2022StdUefi        CreateServerOperatingSystem = "windows_2022_std_uefi"
	CreateServerOperatingSystemWindows2022Std            CreateServerOperatingSystem = "windows_2022_std"
	CreateServerOperatingSystemUbuntu2404X64Lts          CreateServerOperatingSystem = "ubuntu_24_04_x64_lts"
	CreateServerOperatingSystemRockylinux8               CreateServerOperatingSystem = "rockylinux_8"
)

func (e CreateServerOperatingSystem) ToPointer() *CreateServerOperatingSystem {
	return &e
}
func (e *CreateServerOperatingSystem) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipxe":
		fallthrough
	case "windows_server_2019_std_v1":
		fallthrough
	case "ubuntu_22_04_x64_lts":
		fallthrough
	case "debian_11":
		fallthrough
	case "debian_10":
		fallthrough
	case "rhel8":
		fallthrough
	case "windows_server_2012_r2_std_v28":
		fallthrough
	case "windows_server_2012_r2_dc_v5":
		fallthrough
	case "esxi_6_7":
		fallthrough
	case "debian_9_4_x64":
		fallthrough
	case "centos_7_4_x64":
		fallthrough
	case "centos_8_x64":
		fallthrough
	case "ubuntu_16_04_x64_lts":
		fallthrough
	case "ubuntu_20_04_x64_lts":
		fallthrough
	case "windows_server_2016_std_v1":
		fallthrough
	case "windows_server_2016_dc_v1":
		fallthrough
	case "windows_server_2019_dc_v1":
		fallthrough
	case "debian_12":
		fallthrough
	case "ubuntu22_ml_in_a_box":
		fallthrough
	case "ubuntu_18_04_x64_lts":
		fallthrough
	case "windows_server_2019_std_uefi":
		fallthrough
	case "windows_2022_std_uefi":
		fallthrough
	case "windows_2022_std":
		fallthrough
	case "ubuntu_24_04_x64_lts":
		fallthrough
	case "rockylinux_8":
		*e = CreateServerOperatingSystem(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerOperatingSystem: %v", v)
	}
}

// CreateServerRaid - RAID mode for the server
type CreateServerRaid string

const (
	CreateServerRaidRaid0 CreateServerRaid = "raid-0"
	CreateServerRaidRaid1 CreateServerRaid = "raid-1"
)

func (e CreateServerRaid) ToPointer() *CreateServerRaid {
	return &e
}
func (e *CreateServerRaid) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "raid-0":
		fallthrough
	case "raid-1":
		*e = CreateServerRaid(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerRaid: %v", v)
	}
}

// CreateServerBilling - The server billing type. Accepts `hourly` and `monthly` for on demand projects and `yearly` for reserved projects.
type CreateServerBilling string

const (
	CreateServerBillingHourly  CreateServerBilling = "hourly"
	CreateServerBillingMonthly CreateServerBilling = "monthly"
	CreateServerBillingYearly  CreateServerBilling = "yearly"
)

func (e CreateServerBilling) ToPointer() *CreateServerBilling {
	return &e
}
func (e *CreateServerBilling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hourly":
		fallthrough
	case "monthly":
		fallthrough
	case "yearly":
		*e = CreateServerBilling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerBilling: %v", v)
	}
}

type CreateServerServersAttributes struct {
	// The project (ID or Slug) to deploy the server
	Project *string `json:"project,omitempty"`
	// The plan to choose server from
	Plan *CreateServerPlan `json:"plan,omitempty"`
	// The site to deploy the server
	Site *CreateServerSite `json:"site,omitempty"`
	// The operating system for the new server
	OperatingSystem *CreateServerOperatingSystem `json:"operating_system,omitempty"`
	// The server hostname
	Hostname *string `json:"hostname,omitempty"`
	// SSH Keys to set on the server
	SSHKeys []string `json:"ssh_keys,omitempty"`
	// User data to set on the server
	UserData *string `json:"user_data,omitempty"`
	// RAID mode for the server
	Raid *CreateServerRaid `json:"raid,omitempty"`
	// URL where iPXE script is stored on, OR the iPXE script encoded in base64. This attribute is required when iPXE is selected as operating system.
	Ipxe *string `json:"ipxe,omitempty"`
	// The server billing type. Accepts `hourly` and `monthly` for on demand projects and `yearly` for reserved projects.
	Billing *CreateServerBilling `json:"billing,omitempty"`
}

func (o *CreateServerServersAttributes) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateServerServersAttributes) GetPlan() *CreateServerPlan {
	if o == nil {
		return nil
	}
	return o.Plan
}

func (o *CreateServerServersAttributes) GetSite() *CreateServerSite {
	if o == nil {
		return nil
	}
	return o.Site
}

func (o *CreateServerServersAttributes) GetOperatingSystem() *CreateServerOperatingSystem {
	if o == nil {
		return nil
	}
	return o.OperatingSystem
}

func (o *CreateServerServersAttributes) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *CreateServerServersAttributes) GetSSHKeys() []string {
	if o == nil {
		return nil
	}
	return o.SSHKeys
}

func (o *CreateServerServersAttributes) GetUserData() *string {
	if o == nil {
		return nil
	}
	return o.UserData
}

func (o *CreateServerServersAttributes) GetRaid() *CreateServerRaid {
	if o == nil {
		return nil
	}
	return o.Raid
}

func (o *CreateServerServersAttributes) GetIpxe() *string {
	if o == nil {
		return nil
	}
	return o.Ipxe
}

func (o *CreateServerServersAttributes) GetBilling() *CreateServerBilling {
	if o == nil {
		return nil
	}
	return o.Billing
}

type CreateServerServersData struct {
	Type       CreateServerServersType        `json:"type"`
	Attributes *CreateServerServersAttributes `json:"attributes,omitempty"`
}

func (o *CreateServerServersData) GetType() CreateServerServersType {
	if o == nil {
		return CreateServerServersType("")
	}
	return o.Type
}

func (o *CreateServerServersData) GetAttributes() *CreateServerServersAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type CreateServerServersRequestBody struct {
	Data *CreateServerServersData `json:"data,omitempty"`
}

func (o *CreateServerServersRequestBody) GetData() *CreateServerServersData {
	if o == nil {
		return nil
	}
	return o.Data
}

type CreateServerResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Created
	Server *components.Server
}

func (o *CreateServerResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateServerResponse) GetServer() *components.Server {
	if o == nil {
		return nil
	}
	return o.Server
}
