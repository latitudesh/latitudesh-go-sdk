// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PutSSHKeySSHKeysType string

const (
	PutSSHKeySSHKeysTypeSSHKeys PutSSHKeySSHKeysType = "ssh_keys"
)

func (e PutSSHKeySSHKeysType) ToPointer() *PutSSHKeySSHKeysType {
	return &e
}
func (e *PutSSHKeySSHKeysType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ssh_keys":
		*e = PutSSHKeySSHKeysType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutSSHKeySSHKeysType: %v", v)
	}
}

type PutSSHKeySSHKeysAttributes struct {
	Tags []string `json:"tags,omitempty"`
	// Name of the SSH Key
	Name *string `default:"New SSH Key Name" json:"name"`
}

func (p PutSSHKeySSHKeysAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PutSSHKeySSHKeysAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PutSSHKeySSHKeysAttributes) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *PutSSHKeySSHKeysAttributes) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

type PutSSHKeySSHKeysData struct {
	ID         *string                     `default:"ssh_81EVOtR1N4J2Z" json:"id"`
	Type       PutSSHKeySSHKeysType        `json:"type"`
	Attributes *PutSSHKeySSHKeysAttributes `json:"attributes,omitempty"`
}

func (p PutSSHKeySSHKeysData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PutSSHKeySSHKeysData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (p *PutSSHKeySSHKeysData) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PutSSHKeySSHKeysData) GetType() PutSSHKeySSHKeysType {
	if p == nil {
		return PutSSHKeySSHKeysType("")
	}
	return p.Type
}

func (p *PutSSHKeySSHKeysData) GetAttributes() *PutSSHKeySSHKeysAttributes {
	if p == nil {
		return nil
	}
	return p.Attributes
}

type PutSSHKeySSHKeysRequestBody struct {
	Data PutSSHKeySSHKeysData `json:"data"`
}

func (p *PutSSHKeySSHKeysRequestBody) GetData() PutSSHKeySSHKeysData {
	if p == nil {
		return PutSSHKeySSHKeysData{}
	}
	return p.Data
}

type PutSSHKeyRequest struct {
	SSHKeyID    string                      `pathParam:"style=simple,explode=false,name=ssh_key_id"`
	RequestBody PutSSHKeySSHKeysRequestBody `request:"mediaType=application/json"`
}

func (p *PutSSHKeyRequest) GetSSHKeyID() string {
	if p == nil {
		return ""
	}
	return p.SSHKeyID
}

func (p *PutSSHKeyRequest) GetRequestBody() PutSSHKeySSHKeysRequestBody {
	if p == nil {
		return PutSSHKeySSHKeysRequestBody{}
	}
	return p.RequestBody
}

// PutSSHKeyResponseBody - Success
type PutSSHKeyResponseBody struct {
	Data *components.SSHKeyData `json:"data,omitempty"`
}

func (p *PutSSHKeyResponseBody) GetData() *components.SSHKeyData {
	if p == nil {
		return nil
	}
	return p.Data
}

type PutSSHKeyResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *PutSSHKeyResponseBody
}

func (p *PutSSHKeyResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}

func (p *PutSSHKeyResponse) GetObject() *PutSSHKeyResponseBody {
	if p == nil {
		return nil
	}
	return p.Object
}
