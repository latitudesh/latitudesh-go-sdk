// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PatchStorageFilesystemsStorageType string

const (
	PatchStorageFilesystemsStorageTypeFilesystems PatchStorageFilesystemsStorageType = "filesystems"
)

func (e PatchStorageFilesystemsStorageType) ToPointer() *PatchStorageFilesystemsStorageType {
	return &e
}
func (e *PatchStorageFilesystemsStorageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "filesystems":
		*e = PatchStorageFilesystemsStorageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchStorageFilesystemsStorageType: %v", v)
	}
}

type PatchStorageFilesystemsStorageAttributes struct {
	// Size in GB (not required, default is 1500)
	SizeInGb *int64 `default:"1500" json:"size_in_gb"`
}

func (p PatchStorageFilesystemsStorageAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PatchStorageFilesystemsStorageAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PatchStorageFilesystemsStorageAttributes) GetSizeInGb() *int64 {
	if p == nil {
		return nil
	}
	return p.SizeInGb
}

type PatchStorageFilesystemsStorageData struct {
	// Filesystem ID
	ID         string                                   `json:"id"`
	Type       PatchStorageFilesystemsStorageType       `json:"type"`
	Attributes PatchStorageFilesystemsStorageAttributes `json:"attributes"`
}

func (p *PatchStorageFilesystemsStorageData) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PatchStorageFilesystemsStorageData) GetType() PatchStorageFilesystemsStorageType {
	if p == nil {
		return PatchStorageFilesystemsStorageType("")
	}
	return p.Type
}

func (p *PatchStorageFilesystemsStorageData) GetAttributes() PatchStorageFilesystemsStorageAttributes {
	if p == nil {
		return PatchStorageFilesystemsStorageAttributes{}
	}
	return p.Attributes
}

type PatchStorageFilesystemsStorageRequestBody struct {
	Data PatchStorageFilesystemsStorageData `json:"data"`
}

func (p *PatchStorageFilesystemsStorageRequestBody) GetData() PatchStorageFilesystemsStorageData {
	if p == nil {
		return PatchStorageFilesystemsStorageData{}
	}
	return p.Data
}

type PatchStorageFilesystemsRequest struct {
	FilesystemID string                                    `pathParam:"style=simple,explode=false,name=filesystem_id"`
	RequestBody  PatchStorageFilesystemsStorageRequestBody `request:"mediaType=application/json"`
}

func (p *PatchStorageFilesystemsRequest) GetFilesystemID() string {
	if p == nil {
		return ""
	}
	return p.FilesystemID
}

func (p *PatchStorageFilesystemsRequest) GetRequestBody() PatchStorageFilesystemsStorageRequestBody {
	if p == nil {
		return PatchStorageFilesystemsStorageRequestBody{}
	}
	return p.RequestBody
}

// PatchStorageFilesystemsResponseBody - Success
type PatchStorageFilesystemsResponseBody struct {
	Data *components.FilesystemData `json:"data,omitempty"`
}

func (p *PatchStorageFilesystemsResponseBody) GetData() *components.FilesystemData {
	if p == nil {
		return nil
	}
	return p.Data
}

type PatchStorageFilesystemsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *PatchStorageFilesystemsResponseBody
}

func (p *PatchStorageFilesystemsResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}

func (p *PatchStorageFilesystemsResponse) GetObject() *PatchStorageFilesystemsResponseBody {
	if p == nil {
		return nil
	}
	return p.Object
}
