// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PostStorageVolumesMountType string

const (
	PostStorageVolumesMountTypeVolumes PostStorageVolumesMountType = "volumes"
)

func (e PostStorageVolumesMountType) ToPointer() *PostStorageVolumesMountType {
	return &e
}
func (e *PostStorageVolumesMountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "volumes":
		*e = PostStorageVolumesMountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostStorageVolumesMountType: %v", v)
	}
}

type PostStorageVolumesMountAttributes struct {
	// NVMe Qualified Name (NQN) of the client/server that will access the volume storage. Format: nqn.YYYY-MM.domain:identifier (e.g., "nqn.2024-01.com.example:server01"). This uniquely identifies the NVMe client and must be configured on the client server.
	Nqn string `json:"nqn"`
}

func (p *PostStorageVolumesMountAttributes) GetNqn() string {
	if p == nil {
		return ""
	}
	return p.Nqn
}

type PostStorageVolumesMountData struct {
	Type       PostStorageVolumesMountType       `json:"type"`
	Attributes PostStorageVolumesMountAttributes `json:"attributes"`
}

func (p *PostStorageVolumesMountData) GetType() PostStorageVolumesMountType {
	if p == nil {
		return PostStorageVolumesMountType("")
	}
	return p.Type
}

func (p *PostStorageVolumesMountData) GetAttributes() PostStorageVolumesMountAttributes {
	if p == nil {
		return PostStorageVolumesMountAttributes{}
	}
	return p.Attributes
}

type PostStorageVolumesMountRequestBody struct {
	Data PostStorageVolumesMountData `json:"data"`
}

func (p *PostStorageVolumesMountRequestBody) GetData() PostStorageVolumesMountData {
	if p == nil {
		return PostStorageVolumesMountData{}
	}
	return p.Data
}

type PostStorageVolumesMountRequest struct {
	// Volume storage ID
	ID          string                             `pathParam:"style=simple,explode=false,name=id"`
	RequestBody PostStorageVolumesMountRequestBody `request:"mediaType=application/json"`
}

func (p *PostStorageVolumesMountRequest) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PostStorageVolumesMountRequest) GetRequestBody() PostStorageVolumesMountRequestBody {
	if p == nil {
		return PostStorageVolumesMountRequestBody{}
	}
	return p.RequestBody
}

type PostStorageVolumesMountResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (p *PostStorageVolumesMountResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}
