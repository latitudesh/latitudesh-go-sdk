// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type CreateProjectProjectsType string

const (
	CreateProjectProjectsTypeProjects CreateProjectProjectsType = "projects"
)

func (e CreateProjectProjectsType) ToPointer() *CreateProjectProjectsType {
	return &e
}
func (e *CreateProjectProjectsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "projects":
		*e = CreateProjectProjectsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProjectsType: %v", v)
	}
}

// CreateProjectProvisioningType - The provisioning type of the project. Default: on_demand
type CreateProjectProvisioningType string

const (
	CreateProjectProvisioningTypeReserved CreateProjectProvisioningType = "reserved"
	CreateProjectProvisioningTypeOnDemand CreateProjectProvisioningType = "on_demand"
)

func (e CreateProjectProvisioningType) ToPointer() *CreateProjectProvisioningType {
	return &e
}
func (e *CreateProjectProvisioningType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reserved":
		fallthrough
	case "on_demand":
		*e = CreateProjectProvisioningType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProvisioningType: %v", v)
	}
}

type CreateProjectEnvironment string

const (
	CreateProjectEnvironmentDevelopment CreateProjectEnvironment = "Development"
	CreateProjectEnvironmentStaging     CreateProjectEnvironment = "Staging"
	CreateProjectEnvironmentProduction  CreateProjectEnvironment = "Production"
)

func (e CreateProjectEnvironment) ToPointer() *CreateProjectEnvironment {
	return &e
}
func (e *CreateProjectEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Development":
		fallthrough
	case "Staging":
		fallthrough
	case "Production":
		*e = CreateProjectEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvironment: %v", v)
	}
}

type CreateProjectProjectsAttributes struct {
	// The project name. Must be unique.
	Name string `json:"name"`
	// The provisioning type of the project. Default: on_demand
	ProvisioningType CreateProjectProvisioningType `json:"provisioning_type"`
	// The project description.
	Description *string                   `json:"description,omitempty"`
	Environment *CreateProjectEnvironment `json:"environment,omitempty"`
}

func (c *CreateProjectProjectsAttributes) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateProjectProjectsAttributes) GetProvisioningType() CreateProjectProvisioningType {
	if c == nil {
		return CreateProjectProvisioningType("")
	}
	return c.ProvisioningType
}

func (c *CreateProjectProjectsAttributes) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CreateProjectProjectsAttributes) GetEnvironment() *CreateProjectEnvironment {
	if c == nil {
		return nil
	}
	return c.Environment
}

type CreateProjectProjectsData struct {
	Type       CreateProjectProjectsType        `json:"type"`
	Attributes *CreateProjectProjectsAttributes `json:"attributes,omitempty"`
}

func (c *CreateProjectProjectsData) GetType() CreateProjectProjectsType {
	if c == nil {
		return CreateProjectProjectsType("")
	}
	return c.Type
}

func (c *CreateProjectProjectsData) GetAttributes() *CreateProjectProjectsAttributes {
	if c == nil {
		return nil
	}
	return c.Attributes
}

type CreateProjectProjectsRequestBody struct {
	Data *CreateProjectProjectsData `json:"data,omitempty"`
}

func (c *CreateProjectProjectsRequestBody) GetData() *CreateProjectProjectsData {
	if c == nil {
		return nil
	}
	return c.Data
}

// CreateProjectResponseBody - Created
type CreateProjectResponseBody struct {
	Data *components.Project `json:"data,omitempty"`
}

func (c *CreateProjectResponseBody) GetData() *components.Project {
	if c == nil {
		return nil
	}
	return c.Data
}

type CreateProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Created
	Object *CreateProjectResponseBody
}

func (c *CreateProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if c == nil {
		return components.HTTPMetadata{}
	}
	return c.HTTPMeta
}

func (c *CreateProjectResponse) GetObject() *CreateProjectResponseBody {
	if c == nil {
		return nil
	}
	return c.Object
}
