// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type CreateServerReinstallServersType string

const (
	CreateServerReinstallServersTypeReinstalls CreateServerReinstallServersType = "reinstalls"
)

func (e CreateServerReinstallServersType) ToPointer() *CreateServerReinstallServersType {
	return &e
}
func (e *CreateServerReinstallServersType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "reinstalls":
		*e = CreateServerReinstallServersType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerReinstallServersType: %v", v)
	}
}

// CreateServerReinstallServersOperatingSystem - The OS selected for the reinstall process
type CreateServerReinstallServersOperatingSystem string

const (
	CreateServerReinstallServersOperatingSystemIpxe                      CreateServerReinstallServersOperatingSystem = "ipxe"
	CreateServerReinstallServersOperatingSystemWindowsServer2019StdV1    CreateServerReinstallServersOperatingSystem = "windows_server_2019_std_v1"
	CreateServerReinstallServersOperatingSystemUbuntu2204X64Lts          CreateServerReinstallServersOperatingSystem = "ubuntu_22_04_x64_lts"
	CreateServerReinstallServersOperatingSystemDebian11                  CreateServerReinstallServersOperatingSystem = "debian_11"
	CreateServerReinstallServersOperatingSystemDebian10                  CreateServerReinstallServersOperatingSystem = "debian_10"
	CreateServerReinstallServersOperatingSystemRhel8                     CreateServerReinstallServersOperatingSystem = "rhel8"
	CreateServerReinstallServersOperatingSystemWindowsServer2012R2StdV28 CreateServerReinstallServersOperatingSystem = "windows_server_2012_r2_std_v28"
	CreateServerReinstallServersOperatingSystemWindowsServer2012R2DcV5   CreateServerReinstallServersOperatingSystem = "windows_server_2012_r2_dc_v5"
	CreateServerReinstallServersOperatingSystemEsxi67                    CreateServerReinstallServersOperatingSystem = "esxi_6_7"
	CreateServerReinstallServersOperatingSystemDebian94X64               CreateServerReinstallServersOperatingSystem = "debian_9_4_x64"
	CreateServerReinstallServersOperatingSystemCentos74X64               CreateServerReinstallServersOperatingSystem = "centos_7_4_x64"
	CreateServerReinstallServersOperatingSystemCentos8X64                CreateServerReinstallServersOperatingSystem = "centos_8_x64"
	CreateServerReinstallServersOperatingSystemUbuntu1604X64Lts          CreateServerReinstallServersOperatingSystem = "ubuntu_16_04_x64_lts"
	CreateServerReinstallServersOperatingSystemUbuntu2004X64Lts          CreateServerReinstallServersOperatingSystem = "ubuntu_20_04_x64_lts"
	CreateServerReinstallServersOperatingSystemWindowsServer2016StdV1    CreateServerReinstallServersOperatingSystem = "windows_server_2016_std_v1"
	CreateServerReinstallServersOperatingSystemWindowsServer2016DcV1     CreateServerReinstallServersOperatingSystem = "windows_server_2016_dc_v1"
	CreateServerReinstallServersOperatingSystemWindowsServer2019DcV1     CreateServerReinstallServersOperatingSystem = "windows_server_2019_dc_v1"
	CreateServerReinstallServersOperatingSystemDebian12                  CreateServerReinstallServersOperatingSystem = "debian_12"
	CreateServerReinstallServersOperatingSystemUbuntu22MlInABox          CreateServerReinstallServersOperatingSystem = "ubuntu22_ml_in_a_box"
	CreateServerReinstallServersOperatingSystemUbuntu1804X64Lts          CreateServerReinstallServersOperatingSystem = "ubuntu_18_04_x64_lts"
	CreateServerReinstallServersOperatingSystemWindowsServer2019StdUefi  CreateServerReinstallServersOperatingSystem = "windows_server_2019_std_uefi"
	CreateServerReinstallServersOperatingSystemWindows2022StdUefi        CreateServerReinstallServersOperatingSystem = "windows_2022_std_uefi"
	CreateServerReinstallServersOperatingSystemWindows2022Std            CreateServerReinstallServersOperatingSystem = "windows_2022_std"
	CreateServerReinstallServersOperatingSystemUbuntu2404X64Lts          CreateServerReinstallServersOperatingSystem = "ubuntu_24_04_x64_lts"
	CreateServerReinstallServersOperatingSystemRockylinux8               CreateServerReinstallServersOperatingSystem = "rockylinux_8"
)

func (e CreateServerReinstallServersOperatingSystem) ToPointer() *CreateServerReinstallServersOperatingSystem {
	return &e
}
func (e *CreateServerReinstallServersOperatingSystem) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipxe":
		fallthrough
	case "windows_server_2019_std_v1":
		fallthrough
	case "ubuntu_22_04_x64_lts":
		fallthrough
	case "debian_11":
		fallthrough
	case "debian_10":
		fallthrough
	case "rhel8":
		fallthrough
	case "windows_server_2012_r2_std_v28":
		fallthrough
	case "windows_server_2012_r2_dc_v5":
		fallthrough
	case "esxi_6_7":
		fallthrough
	case "debian_9_4_x64":
		fallthrough
	case "centos_7_4_x64":
		fallthrough
	case "centos_8_x64":
		fallthrough
	case "ubuntu_16_04_x64_lts":
		fallthrough
	case "ubuntu_20_04_x64_lts":
		fallthrough
	case "windows_server_2016_std_v1":
		fallthrough
	case "windows_server_2016_dc_v1":
		fallthrough
	case "windows_server_2019_dc_v1":
		fallthrough
	case "debian_12":
		fallthrough
	case "ubuntu22_ml_in_a_box":
		fallthrough
	case "ubuntu_18_04_x64_lts":
		fallthrough
	case "windows_server_2019_std_uefi":
		fallthrough
	case "windows_2022_std_uefi":
		fallthrough
	case "windows_2022_std":
		fallthrough
	case "ubuntu_24_04_x64_lts":
		fallthrough
	case "rockylinux_8":
		*e = CreateServerReinstallServersOperatingSystem(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerReinstallServersOperatingSystem: %v", v)
	}
}

type CreateServerReinstallServersPartitions struct {
	SizeInGb       *int64  `json:"size_in_gb,omitempty"`
	Path           *string `json:"path,omitempty"`
	FilesystemType *string `json:"filesystem_type,omitempty"`
}

func (c *CreateServerReinstallServersPartitions) GetSizeInGb() *int64 {
	if c == nil {
		return nil
	}
	return c.SizeInGb
}

func (c *CreateServerReinstallServersPartitions) GetPath() *string {
	if c == nil {
		return nil
	}
	return c.Path
}

func (c *CreateServerReinstallServersPartitions) GetFilesystemType() *string {
	if c == nil {
		return nil
	}
	return c.FilesystemType
}

// CreateServerReinstallServersRaid - RAID mode for the server
type CreateServerReinstallServersRaid string

const (
	CreateServerReinstallServersRaidRaid0 CreateServerReinstallServersRaid = "raid-0"
	CreateServerReinstallServersRaidRaid1 CreateServerReinstallServersRaid = "raid-1"
)

func (e CreateServerReinstallServersRaid) ToPointer() *CreateServerReinstallServersRaid {
	return &e
}
func (e *CreateServerReinstallServersRaid) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "raid-0":
		fallthrough
	case "raid-1":
		*e = CreateServerReinstallServersRaid(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateServerReinstallServersRaid: %v", v)
	}
}

type CreateServerReinstallServersAttributes struct {
	// The OS selected for the reinstall process
	OperatingSystem *CreateServerReinstallServersOperatingSystem `json:"operating_system,omitempty"`
	// The server hostname to set upon reinstall
	Hostname   *string                                  `json:"hostname,omitempty"`
	Partitions []CreateServerReinstallServersPartitions `json:"partitions,omitempty"`
	// SSH Key IDs to set upon reinstall
	SSHKeys []string `json:"ssh_keys,omitempty"`
	// User data ID to set upon reinstall
	UserData *string `json:"user_data,omitempty"`
	// RAID mode for the server
	Raid *CreateServerReinstallServersRaid `json:"raid,omitempty"`
	// URL where iPXE script is stored on, OR the iPXE script encoded in base64. This attribute is required when operating system iPXE is selected.
	Ipxe *string `json:"ipxe,omitempty"`
}

func (c *CreateServerReinstallServersAttributes) GetOperatingSystem() *CreateServerReinstallServersOperatingSystem {
	if c == nil {
		return nil
	}
	return c.OperatingSystem
}

func (c *CreateServerReinstallServersAttributes) GetHostname() *string {
	if c == nil {
		return nil
	}
	return c.Hostname
}

func (c *CreateServerReinstallServersAttributes) GetPartitions() []CreateServerReinstallServersPartitions {
	if c == nil {
		return nil
	}
	return c.Partitions
}

func (c *CreateServerReinstallServersAttributes) GetSSHKeys() []string {
	if c == nil {
		return nil
	}
	return c.SSHKeys
}

func (c *CreateServerReinstallServersAttributes) GetUserData() *string {
	if c == nil {
		return nil
	}
	return c.UserData
}

func (c *CreateServerReinstallServersAttributes) GetRaid() *CreateServerReinstallServersRaid {
	if c == nil {
		return nil
	}
	return c.Raid
}

func (c *CreateServerReinstallServersAttributes) GetIpxe() *string {
	if c == nil {
		return nil
	}
	return c.Ipxe
}

type CreateServerReinstallServersData struct {
	Type       CreateServerReinstallServersType        `json:"type"`
	Attributes *CreateServerReinstallServersAttributes `json:"attributes,omitempty"`
}

func (c *CreateServerReinstallServersData) GetType() CreateServerReinstallServersType {
	if c == nil {
		return CreateServerReinstallServersType("")
	}
	return c.Type
}

func (c *CreateServerReinstallServersData) GetAttributes() *CreateServerReinstallServersAttributes {
	if c == nil {
		return nil
	}
	return c.Attributes
}

type CreateServerReinstallServersRequestBody struct {
	Data CreateServerReinstallServersData `json:"data"`
}

func (c *CreateServerReinstallServersRequestBody) GetData() CreateServerReinstallServersData {
	if c == nil {
		return CreateServerReinstallServersData{}
	}
	return c.Data
}

type CreateServerReinstallRequest struct {
	ServerID    string                                  `pathParam:"style=simple,explode=false,name=server_id"`
	RequestBody CreateServerReinstallServersRequestBody `request:"mediaType=application/json"`
}

func (c *CreateServerReinstallRequest) GetServerID() string {
	if c == nil {
		return ""
	}
	return c.ServerID
}

func (c *CreateServerReinstallRequest) GetRequestBody() CreateServerReinstallServersRequestBody {
	if c == nil {
		return CreateServerReinstallServersRequestBody{}
	}
	return c.RequestBody
}

type CreateServerReinstallResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (c *CreateServerReinstallResponse) GetHTTPMeta() components.HTTPMetadata {
	if c == nil {
		return components.HTTPMetadata{}
	}
	return c.HTTPMeta
}
