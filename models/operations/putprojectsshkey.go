// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PutProjectSSHKeySSHKeysType string

const (
	PutProjectSSHKeySSHKeysTypeSSHKeys PutProjectSSHKeySSHKeysType = "ssh_keys"
)

func (e PutProjectSSHKeySSHKeysType) ToPointer() *PutProjectSSHKeySSHKeysType {
	return &e
}
func (e *PutProjectSSHKeySSHKeysType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ssh_keys":
		*e = PutProjectSSHKeySSHKeysType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutProjectSSHKeySSHKeysType: %v", v)
	}
}

type PutProjectSSHKeySSHKeysAttributes struct {
	Tags []string `json:"tags,omitempty"`
	// Name of the SSH Key
	Name *string `default:"New SSH Key Name" json:"name"`
}

func (p PutProjectSSHKeySSHKeysAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PutProjectSSHKeySSHKeysAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (p *PutProjectSSHKeySSHKeysAttributes) GetTags() []string {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *PutProjectSSHKeySSHKeysAttributes) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

type PutProjectSSHKeySSHKeysData struct {
	ID         *string                            `default:"ssh_81EVOtR1N4J2Z" json:"id"`
	Type       PutProjectSSHKeySSHKeysType        `json:"type"`
	Attributes *PutProjectSSHKeySSHKeysAttributes `json:"attributes,omitempty"`
}

func (p PutProjectSSHKeySSHKeysData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PutProjectSSHKeySSHKeysData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (p *PutProjectSSHKeySSHKeysData) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PutProjectSSHKeySSHKeysData) GetType() PutProjectSSHKeySSHKeysType {
	if p == nil {
		return PutProjectSSHKeySSHKeysType("")
	}
	return p.Type
}

func (p *PutProjectSSHKeySSHKeysData) GetAttributes() *PutProjectSSHKeySSHKeysAttributes {
	if p == nil {
		return nil
	}
	return p.Attributes
}

type PutProjectSSHKeySSHKeysRequestBody struct {
	Data PutProjectSSHKeySSHKeysData `json:"data"`
}

func (p *PutProjectSSHKeySSHKeysRequestBody) GetData() PutProjectSSHKeySSHKeysData {
	if p == nil {
		return PutProjectSSHKeySSHKeysData{}
	}
	return p.Data
}

type PutProjectSSHKeyRequest struct {
	// Project ID or Slug
	ProjectID   string                             `pathParam:"style=simple,explode=false,name=project_id"`
	SSHKeyID    string                             `pathParam:"style=simple,explode=false,name=ssh_key_id"`
	RequestBody PutProjectSSHKeySSHKeysRequestBody `request:"mediaType=application/json"`
}

func (p *PutProjectSSHKeyRequest) GetProjectID() string {
	if p == nil {
		return ""
	}
	return p.ProjectID
}

func (p *PutProjectSSHKeyRequest) GetSSHKeyID() string {
	if p == nil {
		return ""
	}
	return p.SSHKeyID
}

func (p *PutProjectSSHKeyRequest) GetRequestBody() PutProjectSSHKeySSHKeysRequestBody {
	if p == nil {
		return PutProjectSSHKeySSHKeysRequestBody{}
	}
	return p.RequestBody
}

// PutProjectSSHKeyResponseBody - Success
type PutProjectSSHKeyResponseBody struct {
	Data *components.SSHKeyData `json:"data,omitempty"`
}

func (p *PutProjectSSHKeyResponseBody) GetData() *components.SSHKeyData {
	if p == nil {
		return nil
	}
	return p.Data
}

type PutProjectSSHKeyResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *PutProjectSSHKeyResponseBody
}

func (p *PutProjectSSHKeyResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}

func (p *PutProjectSSHKeyResponse) GetObject() *PutProjectSSHKeyResponseBody {
	if p == nil {
		return nil
	}
	return p.Object
}
