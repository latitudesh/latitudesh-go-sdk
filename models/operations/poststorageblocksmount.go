// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type PostStorageBlocksMountType string

const (
	PostStorageBlocksMountTypeBlocks PostStorageBlocksMountType = "blocks"
)

func (e PostStorageBlocksMountType) ToPointer() *PostStorageBlocksMountType {
	return &e
}
func (e *PostStorageBlocksMountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blocks":
		*e = PostStorageBlocksMountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostStorageBlocksMountType: %v", v)
	}
}

type PostStorageBlocksMountAttributes struct {
	// NVMe Qualified Name (NQN) of the client/server that will access the block storage. Format: nqn.YYYY-MM.domain:identifier (e.g., "nqn.2024-01.com.example:server01"). This uniquely identifies the NVMe client and must be configured on the client server.
	Nqn string `json:"nqn"`
}

func (p *PostStorageBlocksMountAttributes) GetNqn() string {
	if p == nil {
		return ""
	}
	return p.Nqn
}

type PostStorageBlocksMountData struct {
	Type       PostStorageBlocksMountType       `json:"type"`
	Attributes PostStorageBlocksMountAttributes `json:"attributes"`
}

func (p *PostStorageBlocksMountData) GetType() PostStorageBlocksMountType {
	if p == nil {
		return PostStorageBlocksMountType("")
	}
	return p.Type
}

func (p *PostStorageBlocksMountData) GetAttributes() PostStorageBlocksMountAttributes {
	if p == nil {
		return PostStorageBlocksMountAttributes{}
	}
	return p.Attributes
}

type PostStorageBlocksMountRequestBody struct {
	Data PostStorageBlocksMountData `json:"data"`
}

func (p *PostStorageBlocksMountRequestBody) GetData() PostStorageBlocksMountData {
	if p == nil {
		return PostStorageBlocksMountData{}
	}
	return p.Data
}

type PostStorageBlocksMountRequest struct {
	// Block storage ID
	ID          string                            `pathParam:"style=simple,explode=false,name=id"`
	RequestBody PostStorageBlocksMountRequestBody `request:"mediaType=application/json"`
}

func (p *PostStorageBlocksMountRequest) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PostStorageBlocksMountRequest) GetRequestBody() PostStorageBlocksMountRequestBody {
	if p == nil {
		return PostStorageBlocksMountRequestBody{}
	}
	return p.RequestBody
}

type PostStorageBlocksMountResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (p *PostStorageBlocksMountResponse) GetHTTPMeta() components.HTTPMetadata {
	if p == nil {
		return components.HTTPMetadata{}
	}
	return p.HTTPMeta
}
