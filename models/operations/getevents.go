// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

type GetEventsRequest struct {
	// The author ID or email to filter by
	FilterAuthor *string `queryParam:"style=form,explode=true,name=filter[author]"`
	// The project ID to filter by
	FilterProject *string `queryParam:"style=form,explode=true,name=filter[project]"`
	// The target type(s) of the event to filter by
	FilterTargetName []string `queryParam:"style=form,explode=true,name=filter[target_name]"`
	// The target id of the event to filter by
	FilterTargetID *string `queryParam:"style=form,explode=true,name=filter[target_id]"`
	// The action performed in event to filter by
	FilterAction *string `queryParam:"style=form,explode=true,name=filter[action]"`
	// The created at greater than equal date to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)
	FilterCreatedAtGte *string `queryParam:"style=form,explode=true,name=filter[created_at][gte]"`
	// The created at less than equal date to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)
	FilterCreatedAtLte *string `queryParam:"style=form,explode=true,name=filter[created_at][lte]"`
	// The created at between date range date1, date2 (inclusive) to filter by, in ISO formatting (yyyy-MM-dd'T'HH:mm:ss)
	FilterCreatedAt []string `queryParam:"style=form,explode=true,name=filter[created_at]"`
	// Number of items to return per page
	PageSize *int64 `default:"20" queryParam:"style=form,explode=true,name=page[size]"`
	// Page number to return (starts at 1)
	PageNumber *int64 `default:"1" queryParam:"style=form,explode=true,name=page[number]"`
}

func (g GetEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetEventsRequest) GetFilterAuthor() *string {
	if o == nil {
		return nil
	}
	return o.FilterAuthor
}

func (o *GetEventsRequest) GetFilterProject() *string {
	if o == nil {
		return nil
	}
	return o.FilterProject
}

func (o *GetEventsRequest) GetFilterTargetName() []string {
	if o == nil {
		return nil
	}
	return o.FilterTargetName
}

func (o *GetEventsRequest) GetFilterTargetID() *string {
	if o == nil {
		return nil
	}
	return o.FilterTargetID
}

func (o *GetEventsRequest) GetFilterAction() *string {
	if o == nil {
		return nil
	}
	return o.FilterAction
}

func (o *GetEventsRequest) GetFilterCreatedAtGte() *string {
	if o == nil {
		return nil
	}
	return o.FilterCreatedAtGte
}

func (o *GetEventsRequest) GetFilterCreatedAtLte() *string {
	if o == nil {
		return nil
	}
	return o.FilterCreatedAtLte
}

func (o *GetEventsRequest) GetFilterCreatedAt() []string {
	if o == nil {
		return nil
	}
	return o.FilterCreatedAt
}

func (o *GetEventsRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *GetEventsRequest) GetPageNumber() *int64 {
	if o == nil {
		return nil
	}
	return o.PageNumber
}

// GetEventsResponseBody - Success
type GetEventsResponseBody struct {
	Data []components.Events `json:"data,omitempty"`
}

func (o *GetEventsResponseBody) GetData() []components.Events {
	if o == nil {
		return nil
	}
	return o.Data
}

type GetEventsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetEventsResponseBody

	Next func() (*GetEventsResponse, error)
}

func (o *GetEventsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetEventsResponse) GetObject() *GetEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
