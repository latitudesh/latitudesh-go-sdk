// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

// FilterStockLevel - The stock level at the site to filter by
type FilterStockLevel string

const (
	FilterStockLevelUnavailable FilterStockLevel = "Unavailable"
	FilterStockLevelLow         FilterStockLevel = "Low"
	FilterStockLevelMedium      FilterStockLevel = "Medium"
	FilterStockLevelHigh        FilterStockLevel = "High"
	FilterStockLevelUnique      FilterStockLevel = "Unique"
)

func (e FilterStockLevel) ToPointer() *FilterStockLevel {
	return &e
}
func (e *FilterStockLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unavailable":
		fallthrough
	case "Low":
		fallthrough
	case "Medium":
		fallthrough
	case "High":
		fallthrough
	case "Unique":
		*e = FilterStockLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterStockLevel: %v", v)
	}
}

type GetPlansRequest struct {
	// The plan name to filter by
	FilterName *string `queryParam:"style=form,explode=true,name=filter[name]"`
	// The plan slug to filter by
	FilterSlug *string `queryParam:"style=form,explode=true,name=filter[slug]"`
	// The location of the site to filter by
	FilterLocation *string `queryParam:"style=form,explode=true,name=filter[location]"`
	// The stock level at the site to filter by
	FilterStockLevel *FilterStockLevel `queryParam:"style=form,explode=true,name=filter[stock_level]"`
	// The stock available at the site to filter by
	FilterInStock *bool `queryParam:"style=form,explode=true,name=filter[in_stock]"`
	// Filter by the existence of an associated GPU
	FilterGpu *bool `queryParam:"style=form,explode=true,name=filter[gpu]"`
	// The ram size in Gigabytes to filter by, should be used with the following options:
	//                               [eql] to filter for values equal to the provided value.
	//                               [gte] to filter for values greater or equal to the provided value.
	//                               [lte] to filter by values lower or equal to the provided value.
	FilterRAM *int64 `queryParam:"style=form,explode=true,name=filter[ram]"`
	// The disk size in Gigabytes to filter by, should be used with the following options:
	//                               [eql] to filter for values equal to the provided value.
	//                               [gte] to filter for values greater or equal to the provided value.
	//                               [lte] to filter by values lower or equal to the provided value.
	FilterDisk *int64 `queryParam:"style=form,explode=true,name=filter[disk]"`
}

func (o *GetPlansRequest) GetFilterName() *string {
	if o == nil {
		return nil
	}
	return o.FilterName
}

func (o *GetPlansRequest) GetFilterSlug() *string {
	if o == nil {
		return nil
	}
	return o.FilterSlug
}

func (o *GetPlansRequest) GetFilterLocation() *string {
	if o == nil {
		return nil
	}
	return o.FilterLocation
}

func (o *GetPlansRequest) GetFilterStockLevel() *FilterStockLevel {
	if o == nil {
		return nil
	}
	return o.FilterStockLevel
}

func (o *GetPlansRequest) GetFilterInStock() *bool {
	if o == nil {
		return nil
	}
	return o.FilterInStock
}

func (o *GetPlansRequest) GetFilterGpu() *bool {
	if o == nil {
		return nil
	}
	return o.FilterGpu
}

func (o *GetPlansRequest) GetFilterRAM() *int64 {
	if o == nil {
		return nil
	}
	return o.FilterRAM
}

func (o *GetPlansRequest) GetFilterDisk() *int64 {
	if o == nil {
		return nil
	}
	return o.FilterDisk
}

// GetPlansResponseBody - Success
type GetPlansResponseBody struct {
	Data []components.PlanData `json:"data,omitempty"`
}

func (o *GetPlansResponseBody) GetData() []components.PlanData {
	if o == nil {
		return nil
	}
	return o.Data
}

type GetPlansResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetPlansResponseBody
}

func (o *GetPlansResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetPlansResponse) GetObject() *GetPlansResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
