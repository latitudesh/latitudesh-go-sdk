// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/models/components"
)

// QueryParamFilterStockLevel - Filter by the level of containers availability
type QueryParamFilterStockLevel string

const (
	QueryParamFilterStockLevelUnavailable QueryParamFilterStockLevel = "unavailable"
	QueryParamFilterStockLevelLow         QueryParamFilterStockLevel = "low"
	QueryParamFilterStockLevelMedium      QueryParamFilterStockLevel = "medium"
	QueryParamFilterStockLevelHigh        QueryParamFilterStockLevel = "high"
)

func (e QueryParamFilterStockLevel) ToPointer() *QueryParamFilterStockLevel {
	return &e
}
func (e *QueryParamFilterStockLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unavailable":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		*e = QueryParamFilterStockLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamFilterStockLevel: %v", v)
	}
}

type GetContainersPlansRequest struct {
	// The plan name to filter by
	FilterName *string `queryParam:"style=form,explode=true,name=filter[name]"`
	// The plan slug to filter by
	FilterSlug *string `queryParam:"style=form,explode=true,name=filter[slug]"`
	// The location of the site to filter by
	FilterLocation *string `queryParam:"style=form,explode=true,name=filter[location]"`
	// Filter by the level of containers availability
	FilterStockLevel *QueryParamFilterStockLevel `queryParam:"style=form,explode=true,name=filter[stock_level]"`
	// The stock available at the site to filter by
	FilterInStock *bool `queryParam:"style=form,explode=true,name=filter[in_stock]"`
	// Filter by the existence of an associated GPU
	FilterGpu *bool `queryParam:"style=form,explode=true,name=filter[gpu]"`
	// The ram size in Gigabytes to filter by, should be used with the following options:
	//                               [eql] to filter for values equal to the provided value.
	//                               [gte] to filter for values greater or equal to the provided value.
	//                               [lte] to filter by values lower or equal to the provided value.
	FilterRAM *int64 `queryParam:"style=form,explode=true,name=filter[ram]"`
	// The ephemeral_storage size in Gigabytes to filter by, should be used with the following options:
	//                               [eql] to filter for values equal to the provided value.
	//                               [gte] to filter for values greater or equal to the provided value.
	//                               [lte] to filter by values lower or equal to the provided value.
	FilterEphemeralStorage *int64 `queryParam:"style=form,explode=true,name=filter[ephemeral_storage]"`
}

func (g *GetContainersPlansRequest) GetFilterName() *string {
	if g == nil {
		return nil
	}
	return g.FilterName
}

func (g *GetContainersPlansRequest) GetFilterSlug() *string {
	if g == nil {
		return nil
	}
	return g.FilterSlug
}

func (g *GetContainersPlansRequest) GetFilterLocation() *string {
	if g == nil {
		return nil
	}
	return g.FilterLocation
}

func (g *GetContainersPlansRequest) GetFilterStockLevel() *QueryParamFilterStockLevel {
	if g == nil {
		return nil
	}
	return g.FilterStockLevel
}

func (g *GetContainersPlansRequest) GetFilterInStock() *bool {
	if g == nil {
		return nil
	}
	return g.FilterInStock
}

func (g *GetContainersPlansRequest) GetFilterGpu() *bool {
	if g == nil {
		return nil
	}
	return g.FilterGpu
}

func (g *GetContainersPlansRequest) GetFilterRAM() *int64 {
	if g == nil {
		return nil
	}
	return g.FilterRAM
}

func (g *GetContainersPlansRequest) GetFilterEphemeralStorage() *int64 {
	if g == nil {
		return nil
	}
	return g.FilterEphemeralStorage
}

// GetContainersPlansResponseBody - Success
type GetContainersPlansResponseBody struct {
	Data []components.ContainerPlanData `json:"data,omitempty"`
}

func (g *GetContainersPlansResponseBody) GetData() []components.ContainerPlanData {
	if g == nil {
		return nil
	}
	return g.Data
}

type GetContainersPlansResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetContainersPlansResponseBody
}

func (g *GetContainersPlansResponse) GetHTTPMeta() components.HTTPMetadata {
	if g == nil {
		return components.HTTPMetadata{}
	}
	return g.HTTPMeta
}

func (g *GetContainersPlansResponse) GetObject() *GetContainersPlansResponseBody {
	if g == nil {
		return nil
	}
	return g.Object
}
