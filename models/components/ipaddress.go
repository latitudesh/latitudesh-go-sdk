// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Family string

const (
	FamilyIPv4 Family = "IPv4"
	FamilyIPv6 Family = "IPv6"
)

func (e Family) ToPointer() *Family {
	return &e
}
func (e *Family) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IPv4":
		fallthrough
	case "IPv6":
		*e = Family(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Family: %v", v)
	}
}

type IPAddressType string

const (
	IPAddressTypePublic  IPAddressType = "Public"
	IPAddressTypePrivate IPAddressType = "Private"
)

func (e IPAddressType) ToPointer() *IPAddressType {
	return &e
}
func (e *IPAddressType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Public":
		fallthrough
	case "Private":
		*e = IPAddressType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IPAddressType: %v", v)
	}
}

type IPAddressProject struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *IPAddressProject) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IPAddressProject) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Location struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

func (o *Location) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Location) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Location) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type IPAddressRegion struct {
	ID       *string   `json:"id,omitempty"`
	Name     *string   `json:"name,omitempty"`
	Location *Location `json:"location,omitempty"`
}

func (o *IPAddressRegion) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IPAddressRegion) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *IPAddressRegion) GetLocation() *Location {
	if o == nil {
		return nil
	}
	return o.Location
}

type Assignment struct {
	ServerID   *string `json:"server_id,omitempty"`
	Hostname   *string `json:"hostname,omitempty"`
	AssignedAt *string `json:"assigned_at,omitempty"`
}

func (o *Assignment) GetServerID() *string {
	if o == nil {
		return nil
	}
	return o.ServerID
}

func (o *Assignment) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *Assignment) GetAssignedAt() *string {
	if o == nil {
		return nil
	}
	return o.AssignedAt
}

type IPAddressAttributes struct {
	Address    *string           `json:"address,omitempty"`
	Cidr       *string           `json:"cidr,omitempty"`
	Family     *Family           `json:"family,omitempty"`
	Gateway    *string           `json:"gateway,omitempty"`
	Netmask    *string           `json:"netmask,omitempty"`
	Type       *IPAddressType    `json:"type,omitempty"`
	Public     *bool             `json:"public,omitempty"`
	Management *bool             `json:"management,omitempty"`
	Project    *IPAddressProject `json:"project,omitempty"`
	Region     *IPAddressRegion  `json:"region,omitempty"`
	Available  *bool             `json:"available,omitempty"`
	Assignment *Assignment       `json:"assignment,omitempty"`
}

func (o *IPAddressAttributes) GetAddress() *string {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *IPAddressAttributes) GetCidr() *string {
	if o == nil {
		return nil
	}
	return o.Cidr
}

func (o *IPAddressAttributes) GetFamily() *Family {
	if o == nil {
		return nil
	}
	return o.Family
}

func (o *IPAddressAttributes) GetGateway() *string {
	if o == nil {
		return nil
	}
	return o.Gateway
}

func (o *IPAddressAttributes) GetNetmask() *string {
	if o == nil {
		return nil
	}
	return o.Netmask
}

func (o *IPAddressAttributes) GetType() *IPAddressType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *IPAddressAttributes) GetPublic() *bool {
	if o == nil {
		return nil
	}
	return o.Public
}

func (o *IPAddressAttributes) GetManagement() *bool {
	if o == nil {
		return nil
	}
	return o.Management
}

func (o *IPAddressAttributes) GetProject() *IPAddressProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *IPAddressAttributes) GetRegion() *IPAddressRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *IPAddressAttributes) GetAvailable() *bool {
	if o == nil {
		return nil
	}
	return o.Available
}

func (o *IPAddressAttributes) GetAssignment() *Assignment {
	if o == nil {
		return nil
	}
	return o.Assignment
}

type IPAddress struct {
	ID         *string              `json:"id,omitempty"`
	Attributes *IPAddressAttributes `json:"attributes,omitempty"`
}

func (o *IPAddress) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IPAddress) GetAttributes() *IPAddressAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}
