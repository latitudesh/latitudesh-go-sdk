// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Status - `on` - The server is powered ON
// `off` - The server is powered OFF
// `unknown` - The server power status is unknown
// `ready` - The server is in reinstalling state `ready` and should start `disk_erasing` shortly
// `disk_erasing` - The server is in reinstalling state `disk_erasing`
// `failed_disk_erasing` - The server has failed disk erasing in reinstall
// `deploying` - The server is in the last reinstalling stage and is `deploying`
// `failed_deployment` - The server has failed deployment in reinstall
type Status string

const (
	StatusOn                Status = "on"
	StatusOff               Status = "off"
	StatusUnknown           Status = "unknown"
	StatusReady             Status = "ready"
	StatusDiskErasing       Status = "disk_erasing"
	StatusFailedDiskErasing Status = "failed_disk_erasing"
	StatusDeploying         Status = "deploying"
	StatusFailedDeployment  Status = "failed_deployment"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "on":
		fallthrough
	case "off":
		fallthrough
	case "unknown":
		fallthrough
	case "ready":
		fallthrough
	case "disk_erasing":
		fallthrough
	case "failed_disk_erasing":
		fallthrough
	case "deploying":
		fallthrough
	case "failed_deployment":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type IpmiStatus string

const (
	IpmiStatusUnavailable  IpmiStatus = "Unavailable"
	IpmiStatusIntermittent IpmiStatus = "Intermittent"
	IpmiStatusNormal       IpmiStatus = "Normal"
)

func (e IpmiStatus) ToPointer() *IpmiStatus {
	return &e
}
func (e *IpmiStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Unavailable":
		fallthrough
	case "Intermittent":
		fallthrough
	case "Normal":
		*e = IpmiStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IpmiStatus: %v", v)
	}
}

type ServerDataPlan struct {
	// The plan ID
	ID *string `json:"id,omitempty"`
	// The plan name
	Name *string `json:"name,omitempty"`
	// The plan slug
	Slug *string `json:"slug,omitempty"`
	// hourly/monthly pricing. Defaults to `hourly`. Appliable for `on_demand` projects only.
	Billing *string `json:"billing,omitempty"`
}

func (o *ServerDataPlan) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ServerDataPlan) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ServerDataPlan) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *ServerDataPlan) GetBilling() *string {
	if o == nil {
		return nil
	}
	return o.Billing
}

type ServerDataFeatures struct {
	Raid     *bool `json:"raid,omitempty"`
	SSHKeys  *bool `json:"ssh_keys,omitempty"`
	UserData *bool `json:"user_data,omitempty"`
}

func (o *ServerDataFeatures) GetRaid() *bool {
	if o == nil {
		return nil
	}
	return o.Raid
}

func (o *ServerDataFeatures) GetSSHKeys() *bool {
	if o == nil {
		return nil
	}
	return o.SSHKeys
}

func (o *ServerDataFeatures) GetUserData() *bool {
	if o == nil {
		return nil
	}
	return o.UserData
}

type Distro struct {
	// The OS Distro name
	Name *string `json:"name,omitempty"`
	// The OS Distro slug
	Slug *string `json:"slug,omitempty"`
	// The OS Distro Series
	Series *string `json:"series,omitempty"`
}

func (o *Distro) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Distro) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *Distro) GetSeries() *string {
	if o == nil {
		return nil
	}
	return o.Series
}

type OperatingSystem struct {
	// The OS name
	Name *string `json:"name,omitempty"`
	// The OS slug
	Slug *string `json:"slug,omitempty"`
	// The OS description
	Version  *string             `json:"version,omitempty"`
	Features *ServerDataFeatures `json:"features,omitempty"`
	Distro   *Distro             `json:"distro,omitempty"`
}

func (o *OperatingSystem) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OperatingSystem) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *OperatingSystem) GetVersion() *string {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *OperatingSystem) GetFeatures() *ServerDataFeatures {
	if o == nil {
		return nil
	}
	return o.Features
}

func (o *OperatingSystem) GetDistro() *Distro {
	if o == nil {
		return nil
	}
	return o.Distro
}

type ServerDataSpecs struct {
	// CPU model
	CPU *string `json:"cpu,omitempty"`
	// Disk quantity and size in GB (e.g. 2 x 500GB)
	Disk *string `json:"disk,omitempty"`
	// RAM size in GB
	RAM *string `json:"ram,omitempty"`
	// NIC quantity and speed
	Nic *string `json:"nic,omitempty"`
	// GPU model and quantity, if present
	Gpu *string `json:"gpu,omitempty"`
}

func (o *ServerDataSpecs) GetCPU() *string {
	if o == nil {
		return nil
	}
	return o.CPU
}

func (o *ServerDataSpecs) GetDisk() *string {
	if o == nil {
		return nil
	}
	return o.Disk
}

func (o *ServerDataSpecs) GetRAM() *string {
	if o == nil {
		return nil
	}
	return o.RAM
}

func (o *ServerDataSpecs) GetNic() *string {
	if o == nil {
		return nil
	}
	return o.Nic
}

func (o *ServerDataSpecs) GetGpu() *string {
	if o == nil {
		return nil
	}
	return o.Gpu
}

type ServerDataRole string

const (
	ServerDataRoleExternal ServerDataRole = "external"
	ServerDataRoleInternal ServerDataRole = "internal"
	ServerDataRoleIpmi     ServerDataRole = "ipmi"
	ServerDataRoleUnknown  ServerDataRole = "unknown"
)

func (e ServerDataRole) ToPointer() *ServerDataRole {
	return &e
}
func (e *ServerDataRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "external":
		fallthrough
	case "internal":
		fallthrough
	case "ipmi":
		fallthrough
	case "unknown":
		*e = ServerDataRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServerDataRole: %v", v)
	}
}

type Interfaces struct {
	Role        *ServerDataRole `json:"role,omitempty"`
	Name        *string         `json:"name,omitempty"`
	MacAddress  *string         `json:"mac_address,omitempty"`
	Description *string         `json:"description,omitempty"`
}

func (o *Interfaces) GetRole() *ServerDataRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *Interfaces) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Interfaces) GetMacAddress() *string {
	if o == nil {
		return nil
	}
	return o.MacAddress
}

func (o *Interfaces) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type ServerDataAttributes struct {
	Hostname *string `json:"hostname,omitempty"`
	// The server label
	Label *string `json:"label,omitempty"`
	// `on` - The server is powered ON
	// `off` - The server is powered OFF
	// `unknown` - The server power status is unknown
	// `ready` - The server is in reinstalling state `ready` and should start `disk_erasing` shortly
	// `disk_erasing` - The server is in reinstalling state `disk_erasing`
	// `failed_disk_erasing` - The server has failed disk erasing in reinstall
	// `deploying` - The server is in the last reinstalling stage and is `deploying`
	// `failed_deployment` - The server has failed deployment in reinstall
	//
	Status     *Status     `json:"status,omitempty"`
	IpmiStatus *IpmiStatus `json:"ipmi_status,omitempty"`
	// The server role (e.g. Bare Metal)
	Role                *string                   `json:"role,omitempty"`
	Site                *string                   `json:"site,omitempty"`
	Locked              *bool                     `json:"locked,omitempty"`
	Rescue              *bool                     `json:"rescue,omitempty"`
	PrimaryIpv4         *string                   `json:"primary_ipv4,omitempty"`
	PrimaryIpv6         *string                   `json:"primary_ipv6,omitempty"`
	CreatedAt           *string                   `json:"created_at,omitempty"`
	ScheduledDeletionAt *string                   `json:"scheduled_deletion_at,omitempty"`
	Plan                *ServerDataPlan           `json:"plan,omitempty"`
	OperatingSystem     *OperatingSystem          `json:"operating_system,omitempty"`
	Region              *ServerRegionResourceData `json:"region,omitempty"`
	Specs               *ServerDataSpecs          `json:"specs,omitempty"`
	Interfaces          []Interfaces              `json:"interfaces,omitempty"`
	Project             *ProjectInclude           `json:"project,omitempty"`
	Team                *TeamInclude              `json:"team,omitempty"`
}

func (o *ServerDataAttributes) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *ServerDataAttributes) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *ServerDataAttributes) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ServerDataAttributes) GetIpmiStatus() *IpmiStatus {
	if o == nil {
		return nil
	}
	return o.IpmiStatus
}

func (o *ServerDataAttributes) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *ServerDataAttributes) GetSite() *string {
	if o == nil {
		return nil
	}
	return o.Site
}

func (o *ServerDataAttributes) GetLocked() *bool {
	if o == nil {
		return nil
	}
	return o.Locked
}

func (o *ServerDataAttributes) GetRescue() *bool {
	if o == nil {
		return nil
	}
	return o.Rescue
}

func (o *ServerDataAttributes) GetPrimaryIpv4() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryIpv4
}

func (o *ServerDataAttributes) GetPrimaryIpv6() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryIpv6
}

func (o *ServerDataAttributes) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ServerDataAttributes) GetScheduledDeletionAt() *string {
	if o == nil {
		return nil
	}
	return o.ScheduledDeletionAt
}

func (o *ServerDataAttributes) GetPlan() *ServerDataPlan {
	if o == nil {
		return nil
	}
	return o.Plan
}

func (o *ServerDataAttributes) GetOperatingSystem() *OperatingSystem {
	if o == nil {
		return nil
	}
	return o.OperatingSystem
}

func (o *ServerDataAttributes) GetRegion() *ServerRegionResourceData {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *ServerDataAttributes) GetSpecs() *ServerDataSpecs {
	if o == nil {
		return nil
	}
	return o.Specs
}

func (o *ServerDataAttributes) GetInterfaces() []Interfaces {
	if o == nil {
		return nil
	}
	return o.Interfaces
}

func (o *ServerDataAttributes) GetProject() *ProjectInclude {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *ServerDataAttributes) GetTeam() *TeamInclude {
	if o == nil {
		return nil
	}
	return o.Team
}

type ServerData struct {
	ID         *string               `json:"id,omitempty"`
	Type       *string               `json:"type,omitempty"`
	Attributes *ServerDataAttributes `json:"attributes,omitempty"`
}

func (o *ServerData) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ServerData) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ServerData) GetAttributes() *ServerDataAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}
