// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ContainerPlanDataType string

const (
	ContainerPlanDataTypeContainerPlan ContainerPlanDataType = "container_plan"
)

func (e ContainerPlanDataType) ToPointer() *ContainerPlanDataType {
	return &e
}
func (e *ContainerPlanDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "container_plan":
		*e = ContainerPlanDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContainerPlanDataType: %v", v)
	}
}

type ContainerPlanDataCPU struct {
	Cores *float64 `json:"cores,omitempty"`
	Count *float64 `json:"count,omitempty"`
}

func (c *ContainerPlanDataCPU) GetCores() *float64 {
	if c == nil {
		return nil
	}
	return c.Cores
}

func (c *ContainerPlanDataCPU) GetCount() *float64 {
	if c == nil {
		return nil
	}
	return c.Count
}

type ContainerPlanDataMemory struct {
	Total *float64 `json:"total,omitempty"`
}

func (c *ContainerPlanDataMemory) GetTotal() *float64 {
	if c == nil {
		return nil
	}
	return c.Total
}

type EphemeralStorage struct {
	Size *float64 `json:"size,omitempty"`
}

func (e *EphemeralStorage) GetSize() *float64 {
	if e == nil {
		return nil
	}
	return e.Size
}

type ContainerPlanDataGpu struct {
	Count *float64 `json:"count,omitempty"`
	Type  *string  `json:"type,omitempty"`
}

func (c *ContainerPlanDataGpu) GetCount() *float64 {
	if c == nil {
		return nil
	}
	return c.Count
}

func (c *ContainerPlanDataGpu) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

type ContainerPlanDataSpecs struct {
	CPU              *ContainerPlanDataCPU    `json:"cpu,omitempty"`
	Memory           *ContainerPlanDataMemory `json:"memory,omitempty"`
	EphemeralStorage *EphemeralStorage        `json:"ephemeral_storage,omitempty"`
	Gpu              *ContainerPlanDataGpu    `json:"gpu,omitempty"`
}

func (c *ContainerPlanDataSpecs) GetCPU() *ContainerPlanDataCPU {
	if c == nil {
		return nil
	}
	return c.CPU
}

func (c *ContainerPlanDataSpecs) GetMemory() *ContainerPlanDataMemory {
	if c == nil {
		return nil
	}
	return c.Memory
}

func (c *ContainerPlanDataSpecs) GetEphemeralStorage() *EphemeralStorage {
	if c == nil {
		return nil
	}
	return c.EphemeralStorage
}

func (c *ContainerPlanDataSpecs) GetGpu() *ContainerPlanDataGpu {
	if c == nil {
		return nil
	}
	return c.Gpu
}

type ContainerPlanDataLocations struct {
	Available []string `json:"available,omitempty"`
	InStock   []string `json:"in_stock,omitempty"`
}

func (c *ContainerPlanDataLocations) GetAvailable() []string {
	if c == nil {
		return nil
	}
	return c.Available
}

func (c *ContainerPlanDataLocations) GetInStock() []string {
	if c == nil {
		return nil
	}
	return c.InStock
}

type ContainerPlanDataStockLevel string

const (
	ContainerPlanDataStockLevelUnavailable ContainerPlanDataStockLevel = "unavailable"
	ContainerPlanDataStockLevelLow         ContainerPlanDataStockLevel = "low"
	ContainerPlanDataStockLevelMedium      ContainerPlanDataStockLevel = "medium"
	ContainerPlanDataStockLevelHigh        ContainerPlanDataStockLevel = "high"
)

func (e ContainerPlanDataStockLevel) ToPointer() *ContainerPlanDataStockLevel {
	return &e
}
func (e *ContainerPlanDataStockLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unavailable":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		*e = ContainerPlanDataStockLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContainerPlanDataStockLevel: %v", v)
	}
}

type ContainerPlanDataUSD struct {
	Minute *float64 `json:"minute,omitempty"`
	Hour   *float64 `json:"hour,omitempty"`
}

func (c *ContainerPlanDataUSD) GetMinute() *float64 {
	if c == nil {
		return nil
	}
	return c.Minute
}

func (c *ContainerPlanDataUSD) GetHour() *float64 {
	if c == nil {
		return nil
	}
	return c.Hour
}

type ContainerPlanDataBRL struct {
	Minute *float64 `json:"minute,omitempty"`
	Hour   *float64 `json:"hour,omitempty"`
}

func (c *ContainerPlanDataBRL) GetMinute() *float64 {
	if c == nil {
		return nil
	}
	return c.Minute
}

func (c *ContainerPlanDataBRL) GetHour() *float64 {
	if c == nil {
		return nil
	}
	return c.Hour
}

type ContainerPlanDataPricing struct {
	Usd *ContainerPlanDataUSD `json:"USD,omitempty"`
	Brl *ContainerPlanDataBRL `json:"BRL,omitempty"`
}

func (c *ContainerPlanDataPricing) GetUsd() *ContainerPlanDataUSD {
	if c == nil {
		return nil
	}
	return c.Usd
}

func (c *ContainerPlanDataPricing) GetBrl() *ContainerPlanDataBRL {
	if c == nil {
		return nil
	}
	return c.Brl
}

type ContainerPlanDataRegions struct {
	Name       *string                      `json:"name,omitempty"`
	Locations  *ContainerPlanDataLocations  `json:"locations,omitempty"`
	StockLevel *ContainerPlanDataStockLevel `json:"stock_level,omitempty"`
	Pricing    *ContainerPlanDataPricing    `json:"pricing,omitempty"`
}

func (c *ContainerPlanDataRegions) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *ContainerPlanDataRegions) GetLocations() *ContainerPlanDataLocations {
	if c == nil {
		return nil
	}
	return c.Locations
}

func (c *ContainerPlanDataRegions) GetStockLevel() *ContainerPlanDataStockLevel {
	if c == nil {
		return nil
	}
	return c.StockLevel
}

func (c *ContainerPlanDataRegions) GetPricing() *ContainerPlanDataPricing {
	if c == nil {
		return nil
	}
	return c.Pricing
}

type ContainerPlanDataAttributes struct {
	Slug    *string                    `json:"slug,omitempty"`
	Specs   *ContainerPlanDataSpecs    `json:"specs,omitempty"`
	Regions []ContainerPlanDataRegions `json:"regions,omitempty"`
}

func (c *ContainerPlanDataAttributes) GetSlug() *string {
	if c == nil {
		return nil
	}
	return c.Slug
}

func (c *ContainerPlanDataAttributes) GetSpecs() *ContainerPlanDataSpecs {
	if c == nil {
		return nil
	}
	return c.Specs
}

func (c *ContainerPlanDataAttributes) GetRegions() []ContainerPlanDataRegions {
	if c == nil {
		return nil
	}
	return c.Regions
}

type ContainerPlanData struct {
	ID         *string                      `json:"id,omitempty"`
	Type       *ContainerPlanDataType       `json:"type,omitempty"`
	Attributes *ContainerPlanDataAttributes `json:"attributes,omitempty"`
}

func (c *ContainerPlanData) GetID() *string {
	if c == nil {
		return nil
	}
	return c.ID
}

func (c *ContainerPlanData) GetType() *ContainerPlanDataType {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *ContainerPlanData) GetAttributes() *ContainerPlanDataAttributes {
	if c == nil {
		return nil
	}
	return c.Attributes
}
