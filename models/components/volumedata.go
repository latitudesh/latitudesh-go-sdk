// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
	"time"
)

type VolumeDataType string

const (
	VolumeDataTypeVolumes VolumeDataType = "volumes"
)

func (e VolumeDataType) ToPointer() *VolumeDataType {
	return &e
}
func (e *VolumeDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "volumes":
		*e = VolumeDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VolumeDataType: %v", v)
	}
}

type Initiators struct {
	Nqn *string `json:"nqn,omitempty"`
}

func (i *Initiators) GetNqn() *string {
	if i == nil {
		return nil
	}
	return i.Nqn
}

type VolumeDataAttributes struct {
	Name        *string         `json:"name,omitempty"`
	SizeInGb    *int64          `json:"size_in_gb,omitempty"`
	CreatedAt   *time.Time      `json:"created_at,omitempty"`
	NamespaceID *int64          `json:"namespace_id,omitempty"`
	ConnectorID *string         `json:"connector_id,omitempty"`
	Initiators  []Initiators    `json:"initiators,omitempty"`
	Project     *ProjectInclude `json:"project,omitempty"`
	Team        *TeamInclude    `json:"team,omitempty"`
}

func (v VolumeDataAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VolumeDataAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (v *VolumeDataAttributes) GetName() *string {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *VolumeDataAttributes) GetSizeInGb() *int64 {
	if v == nil {
		return nil
	}
	return v.SizeInGb
}

func (v *VolumeDataAttributes) GetCreatedAt() *time.Time {
	if v == nil {
		return nil
	}
	return v.CreatedAt
}

func (v *VolumeDataAttributes) GetNamespaceID() *int64 {
	if v == nil {
		return nil
	}
	return v.NamespaceID
}

func (v *VolumeDataAttributes) GetConnectorID() *string {
	if v == nil {
		return nil
	}
	return v.ConnectorID
}

func (v *VolumeDataAttributes) GetInitiators() []Initiators {
	if v == nil {
		return nil
	}
	return v.Initiators
}

func (v *VolumeDataAttributes) GetProject() *ProjectInclude {
	if v == nil {
		return nil
	}
	return v.Project
}

func (v *VolumeDataAttributes) GetTeam() *TeamInclude {
	if v == nil {
		return nil
	}
	return v.Team
}

type VolumeData struct {
	ID         *string               `json:"id,omitempty"`
	Type       *VolumeDataType       `json:"type,omitempty"`
	Attributes *VolumeDataAttributes `json:"attributes,omitempty"`
}

func (v *VolumeData) GetID() *string {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *VolumeData) GetType() *VolumeDataType {
	if v == nil {
		return nil
	}
	return v.Type
}

func (v *VolumeData) GetAttributes() *VolumeDataAttributes {
	if v == nil {
		return nil
	}
	return v.Attributes
}
