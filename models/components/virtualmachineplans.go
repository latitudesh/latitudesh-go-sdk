// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// VirtualMachinePlansType - The type of the resource
type VirtualMachinePlansType string

const (
	VirtualMachinePlansTypeVirtualMachinePlans VirtualMachinePlansType = "virtual_machine_plans"
)

func (e VirtualMachinePlansType) ToPointer() *VirtualMachinePlansType {
	return &e
}
func (e *VirtualMachinePlansType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "virtual_machine_plans":
		*e = VirtualMachinePlansType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachinePlansType: %v", v)
	}
}

// VirtualMachinePlansDataType - The type of the disk
type VirtualMachinePlansDataType string

const (
	VirtualMachinePlansDataTypeLocal VirtualMachinePlansDataType = "local"
)

func (e VirtualMachinePlansDataType) ToPointer() *VirtualMachinePlansDataType {
	return &e
}
func (e *VirtualMachinePlansDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "local":
		*e = VirtualMachinePlansDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachinePlansDataType: %v", v)
	}
}

// VirtualMachinePlansUnit - The unit of the disk size
type VirtualMachinePlansUnit string

const (
	VirtualMachinePlansUnitGib VirtualMachinePlansUnit = "gib"
)

func (e VirtualMachinePlansUnit) ToPointer() *VirtualMachinePlansUnit {
	return &e
}
func (e *VirtualMachinePlansUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gib":
		*e = VirtualMachinePlansUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachinePlansUnit: %v", v)
	}
}

type Size struct {
	// The total size of the disk
	Amount *int64 `json:"amount,omitempty"`
	// The unit of the disk size
	Unit *VirtualMachinePlansUnit `json:"unit,omitempty"`
}

func (s *Size) GetAmount() *int64 {
	if s == nil {
		return nil
	}
	return s.Amount
}

func (s *Size) GetUnit() *VirtualMachinePlansUnit {
	if s == nil {
		return nil
	}
	return s.Unit
}

type Disk struct {
	// The type of the disk
	Type *VirtualMachinePlansDataType `json:"type,omitempty"`
	Size *Size                        `json:"size,omitempty"`
}

func (d *Disk) GetType() *VirtualMachinePlansDataType {
	if d == nil {
		return nil
	}
	return d.Type
}

func (d *Disk) GetSize() *Size {
	if d == nil {
		return nil
	}
	return d.Size
}

type VirtualMachinePlansSpecs struct {
	// The total memory
	Memory *int64 `json:"memory,omitempty"`
	// The number of virtual CPUs
	Vcpus *int64 `json:"vcpus,omitempty"`
	Disk  *Disk  `json:"disk,omitempty"`
}

func (v *VirtualMachinePlansSpecs) GetMemory() *int64 {
	if v == nil {
		return nil
	}
	return v.Memory
}

func (v *VirtualMachinePlansSpecs) GetVcpus() *int64 {
	if v == nil {
		return nil
	}
	return v.Vcpus
}

func (v *VirtualMachinePlansSpecs) GetDisk() *Disk {
	if v == nil {
		return nil
	}
	return v.Disk
}

type VirtualMachinePlansUSD struct {
	Hour  *float64 `json:"hour,omitempty"`
	Month *float64 `json:"month,omitempty"`
	Year  *float64 `json:"year,omitempty"`
}

func (v *VirtualMachinePlansUSD) GetHour() *float64 {
	if v == nil {
		return nil
	}
	return v.Hour
}

func (v *VirtualMachinePlansUSD) GetMonth() *float64 {
	if v == nil {
		return nil
	}
	return v.Month
}

func (v *VirtualMachinePlansUSD) GetYear() *float64 {
	if v == nil {
		return nil
	}
	return v.Year
}

type VirtualMachinePlansBRL struct {
	Hour  *float64 `json:"hour,omitempty"`
	Month *float64 `json:"month,omitempty"`
	Year  *float64 `json:"year,omitempty"`
}

func (v *VirtualMachinePlansBRL) GetHour() *float64 {
	if v == nil {
		return nil
	}
	return v.Hour
}

func (v *VirtualMachinePlansBRL) GetMonth() *float64 {
	if v == nil {
		return nil
	}
	return v.Month
}

func (v *VirtualMachinePlansBRL) GetYear() *float64 {
	if v == nil {
		return nil
	}
	return v.Year
}

type VirtualMachinePlansPricing struct {
	Usd *VirtualMachinePlansUSD `json:"USD,omitempty"`
	Brl *VirtualMachinePlansBRL `json:"BRL,omitempty"`
}

func (v *VirtualMachinePlansPricing) GetUsd() *VirtualMachinePlansUSD {
	if v == nil {
		return nil
	}
	return v.Usd
}

func (v *VirtualMachinePlansPricing) GetBrl() *VirtualMachinePlansBRL {
	if v == nil {
		return nil
	}
	return v.Brl
}

type VirtualMachinePlansRegions struct {
	Name      *string                     `json:"name,omitempty"`
	Available []string                    `json:"available,omitempty"`
	Pricing   *VirtualMachinePlansPricing `json:"pricing,omitempty"`
}

func (v *VirtualMachinePlansRegions) GetName() *string {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *VirtualMachinePlansRegions) GetAvailable() []string {
	if v == nil {
		return nil
	}
	return v.Available
}

func (v *VirtualMachinePlansRegions) GetPricing() *VirtualMachinePlansPricing {
	if v == nil {
		return nil
	}
	return v.Pricing
}

// VirtualMachinePlansStockLevel - The stock level of the plan
type VirtualMachinePlansStockLevel string

const (
	VirtualMachinePlansStockLevelLow VirtualMachinePlansStockLevel = "low"
)

func (e VirtualMachinePlansStockLevel) ToPointer() *VirtualMachinePlansStockLevel {
	return &e
}
func (e *VirtualMachinePlansStockLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "low":
		*e = VirtualMachinePlansStockLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachinePlansStockLevel: %v", v)
	}
}

type VirtualMachinePlansAttributes struct {
	// The name of the plan
	Name    *string                      `json:"name,omitempty"`
	Specs   *VirtualMachinePlansSpecs    `json:"specs,omitempty"`
	Regions []VirtualMachinePlansRegions `json:"regions,omitempty"`
	// The stock level of the plan
	StockLevel *VirtualMachinePlansStockLevel `json:"stock_level,omitempty"`
}

func (v *VirtualMachinePlansAttributes) GetName() *string {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *VirtualMachinePlansAttributes) GetSpecs() *VirtualMachinePlansSpecs {
	if v == nil {
		return nil
	}
	return v.Specs
}

func (v *VirtualMachinePlansAttributes) GetRegions() []VirtualMachinePlansRegions {
	if v == nil {
		return nil
	}
	return v.Regions
}

func (v *VirtualMachinePlansAttributes) GetStockLevel() *VirtualMachinePlansStockLevel {
	if v == nil {
		return nil
	}
	return v.StockLevel
}

type VirtualMachinePlansData struct {
	// The ID of the plan
	ID *string `json:"id,omitempty"`
	// The type of the resource
	Type       *VirtualMachinePlansType       `json:"type,omitempty"`
	Attributes *VirtualMachinePlansAttributes `json:"attributes,omitempty"`
}

func (v *VirtualMachinePlansData) GetID() *string {
	if v == nil {
		return nil
	}
	return v.ID
}

func (v *VirtualMachinePlansData) GetType() *VirtualMachinePlansType {
	if v == nil {
		return nil
	}
	return v.Type
}

func (v *VirtualMachinePlansData) GetAttributes() *VirtualMachinePlansAttributes {
	if v == nil {
		return nil
	}
	return v.Attributes
}

type VirtualMachinePlans struct {
	Data []VirtualMachinePlansData `json:"data,omitempty"`
}

func (v *VirtualMachinePlans) GetData() []VirtualMachinePlansData {
	if v == nil {
		return nil
	}
	return v.Data
}
