// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type PlanDataType string

const (
	PlanDataTypePlans PlanDataType = "plans"
)

func (e PlanDataType) ToPointer() *PlanDataType {
	return &e
}
func (e *PlanDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "plans":
		*e = PlanDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlanDataType: %v", v)
	}
}

type CPU struct {
	Type  *string  `json:"type,omitempty"`
	Clock *float64 `json:"clock,omitempty"`
	Cores *float64 `json:"cores,omitempty"`
	Count *float64 `json:"count,omitempty"`
}

func (c *CPU) GetType() *string {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *CPU) GetClock() *float64 {
	if c == nil {
		return nil
	}
	return c.Clock
}

func (c *CPU) GetCores() *float64 {
	if c == nil {
		return nil
	}
	return c.Cores
}

func (c *CPU) GetCount() *float64 {
	if c == nil {
		return nil
	}
	return c.Count
}

type Memory struct {
	Total *float64 `json:"total,omitempty"`
}

func (m *Memory) GetTotal() *float64 {
	if m == nil {
		return nil
	}
	return m.Total
}

type PlanDataAttributesType string

const (
	PlanDataAttributesTypeSsd  PlanDataAttributesType = "SSD"
	PlanDataAttributesTypeHdd  PlanDataAttributesType = "HDD"
	PlanDataAttributesTypeNvme PlanDataAttributesType = "NVME"
)

func (e PlanDataAttributesType) ToPointer() *PlanDataAttributesType {
	return &e
}
func (e *PlanDataAttributesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSD":
		fallthrough
	case "HDD":
		fallthrough
	case "NVME":
		*e = PlanDataAttributesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlanDataAttributesType: %v", v)
	}
}

type Drives struct {
	Count *float64                `json:"count,omitempty"`
	Size  *string                 `json:"size,omitempty"`
	Type  *PlanDataAttributesType `json:"type,omitempty"`
}

func (d *Drives) GetCount() *float64 {
	if d == nil {
		return nil
	}
	return d.Count
}

func (d *Drives) GetSize() *string {
	if d == nil {
		return nil
	}
	return d.Size
}

func (d *Drives) GetType() *PlanDataAttributesType {
	if d == nil {
		return nil
	}
	return d.Type
}

type Nics struct {
	Count *float64 `json:"count,omitempty"`
	Type  *string  `json:"type,omitempty"`
}

func (n *Nics) GetCount() *float64 {
	if n == nil {
		return nil
	}
	return n.Count
}

func (n *Nics) GetType() *string {
	if n == nil {
		return nil
	}
	return n.Type
}

type Gpu struct {
	Count *float64 `json:"count,omitempty"`
	Type  *string  `json:"type,omitempty"`
}

func (g *Gpu) GetCount() *float64 {
	if g == nil {
		return nil
	}
	return g.Count
}

func (g *Gpu) GetType() *string {
	if g == nil {
		return nil
	}
	return g.Type
}

type Specs struct {
	CPU    *CPU     `json:"cpu,omitempty"`
	Memory *Memory  `json:"memory,omitempty"`
	Drives []Drives `json:"drives,omitempty"`
	Nics   []Nics   `json:"nics,omitempty"`
	Gpu    *Gpu     `json:"gpu,omitempty"`
}

func (s *Specs) GetCPU() *CPU {
	if s == nil {
		return nil
	}
	return s.CPU
}

func (s *Specs) GetMemory() *Memory {
	if s == nil {
		return nil
	}
	return s.Memory
}

func (s *Specs) GetDrives() []Drives {
	if s == nil {
		return nil
	}
	return s.Drives
}

func (s *Specs) GetNics() []Nics {
	if s == nil {
		return nil
	}
	return s.Nics
}

func (s *Specs) GetGpu() *Gpu {
	if s == nil {
		return nil
	}
	return s.Gpu
}

type Locations struct {
	Available []string `json:"available,omitempty"`
	InStock   []string `json:"in_stock,omitempty"`
}

func (l *Locations) GetAvailable() []string {
	if l == nil {
		return nil
	}
	return l.Available
}

func (l *Locations) GetInStock() []string {
	if l == nil {
		return nil
	}
	return l.InStock
}

type StockLevel string

const (
	StockLevelUnavailable StockLevel = "unavailable"
	StockLevelLow         StockLevel = "low"
	StockLevelMedium      StockLevel = "medium"
	StockLevelHigh        StockLevel = "high"
)

func (e StockLevel) ToPointer() *StockLevel {
	return &e
}
func (e *StockLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unavailable":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		*e = StockLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StockLevel: %v", v)
	}
}

type PlanDataUSD struct {
	Hour  *float64 `json:"hour,omitempty"`
	Month *float64 `json:"month,omitempty"`
	Year  *float64 `json:"year,omitempty"`
}

func (p *PlanDataUSD) GetHour() *float64 {
	if p == nil {
		return nil
	}
	return p.Hour
}

func (p *PlanDataUSD) GetMonth() *float64 {
	if p == nil {
		return nil
	}
	return p.Month
}

func (p *PlanDataUSD) GetYear() *float64 {
	if p == nil {
		return nil
	}
	return p.Year
}

type PlanDataBRL struct {
	Hour  *float64 `json:"hour,omitempty"`
	Month *float64 `json:"month,omitempty"`
	Year  *float64 `json:"year,omitempty"`
}

func (p *PlanDataBRL) GetHour() *float64 {
	if p == nil {
		return nil
	}
	return p.Hour
}

func (p *PlanDataBRL) GetMonth() *float64 {
	if p == nil {
		return nil
	}
	return p.Month
}

func (p *PlanDataBRL) GetYear() *float64 {
	if p == nil {
		return nil
	}
	return p.Year
}

type PlanDataPricing struct {
	Usd *PlanDataUSD `json:"USD,omitempty"`
	Brl *PlanDataBRL `json:"BRL,omitempty"`
}

func (p *PlanDataPricing) GetUsd() *PlanDataUSD {
	if p == nil {
		return nil
	}
	return p.Usd
}

func (p *PlanDataPricing) GetBrl() *PlanDataBRL {
	if p == nil {
		return nil
	}
	return p.Brl
}

type PlanDataRegions struct {
	Name             *string          `json:"name,omitempty"`
	DeploysInstantly []string         `json:"deploys_instantly,omitempty"`
	Locations        *Locations       `json:"locations,omitempty"`
	StockLevel       *StockLevel      `json:"stock_level,omitempty"`
	Pricing          *PlanDataPricing `json:"pricing,omitempty"`
}

func (p *PlanDataRegions) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PlanDataRegions) GetDeploysInstantly() []string {
	if p == nil {
		return nil
	}
	return p.DeploysInstantly
}

func (p *PlanDataRegions) GetLocations() *Locations {
	if p == nil {
		return nil
	}
	return p.Locations
}

func (p *PlanDataRegions) GetStockLevel() *StockLevel {
	if p == nil {
		return nil
	}
	return p.StockLevel
}

func (p *PlanDataRegions) GetPricing() *PlanDataPricing {
	if p == nil {
		return nil
	}
	return p.Pricing
}

type PlanDataAttributes struct {
	Slug     *string           `json:"slug,omitempty"`
	Name     *string           `json:"name,omitempty"`
	Features []string          `json:"features,omitempty"`
	Specs    *Specs            `json:"specs,omitempty"`
	Regions  []PlanDataRegions `json:"regions,omitempty"`
}

func (p *PlanDataAttributes) GetSlug() *string {
	if p == nil {
		return nil
	}
	return p.Slug
}

func (p *PlanDataAttributes) GetName() *string {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PlanDataAttributes) GetFeatures() []string {
	if p == nil {
		return nil
	}
	return p.Features
}

func (p *PlanDataAttributes) GetSpecs() *Specs {
	if p == nil {
		return nil
	}
	return p.Specs
}

func (p *PlanDataAttributes) GetRegions() []PlanDataRegions {
	if p == nil {
		return nil
	}
	return p.Regions
}

type PlanData struct {
	ID         *string             `json:"id,omitempty"`
	Type       *PlanDataType       `json:"type,omitempty"`
	Attributes *PlanDataAttributes `json:"attributes,omitempty"`
}

func (p *PlanData) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PlanData) GetType() *PlanDataType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PlanData) GetAttributes() *PlanDataAttributes {
	if p == nil {
		return nil
	}
	return p.Attributes
}
