// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/latitudesh/latitudesh-go-sdk/internal/utils"
)

type CreateAPIKeyType string

const (
	CreateAPIKeyTypeAPIKeys CreateAPIKeyType = "api_keys"
)

func (e CreateAPIKeyType) ToPointer() *CreateAPIKeyType {
	return &e
}
func (e *CreateAPIKeyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api_keys":
		*e = CreateAPIKeyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAPIKeyType: %v", v)
	}
}

type CreateAPIKeyAttributes struct {
	// Name of the API Key
	Name *string `default:"Name of the API Key" json:"name"`
}

func (c CreateAPIKeyAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateAPIKeyAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateAPIKeyAttributes) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Data struct {
	Type       CreateAPIKeyType        `json:"type"`
	Attributes *CreateAPIKeyAttributes `json:"attributes,omitempty"`
}

func (o *Data) GetType() CreateAPIKeyType {
	if o == nil {
		return CreateAPIKeyType("")
	}
	return o.Type
}

func (o *Data) GetAttributes() *CreateAPIKeyAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type CreateAPIKey struct {
	Data *Data `json:"data,omitempty"`
}

func (o *CreateAPIKey) GetData() *Data {
	if o == nil {
		return nil
	}
	return o.Data
}
