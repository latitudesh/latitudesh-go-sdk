// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
)

type Partitions struct {
	Path           *string `json:"path,omitempty"`
	SizeInGb       *int64  `json:"size_in_gb,omitempty"`
	FilesystemType *string `json:"filesystem_type,omitempty"`
}

func (o *Partitions) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Partitions) GetSizeInGb() *int64 {
	if o == nil {
		return nil
	}
	return o.SizeInGb
}

func (o *Partitions) GetFilesystemType() *string {
	if o == nil {
		return nil
	}
	return o.FilesystemType
}

type DeployConfigAttributes struct {
	OperatingSystem *string      `json:"operating_system,omitempty"`
	Hostname        *string      `json:"hostname,omitempty"`
	Raid            *string      `json:"raid,omitempty"`
	SSHKeys         []string     `json:"ssh_keys,omitempty"`
	Partitions      []Partitions `json:"partitions,omitempty"`
}

func (o *DeployConfigAttributes) GetOperatingSystem() *string {
	if o == nil {
		return nil
	}
	return o.OperatingSystem
}

func (o *DeployConfigAttributes) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *DeployConfigAttributes) GetRaid() *string {
	if o == nil {
		return nil
	}
	return o.Raid
}

func (o *DeployConfigAttributes) GetSSHKeys() []string {
	if o == nil {
		return nil
	}
	return o.SSHKeys
}

func (o *DeployConfigAttributes) GetPartitions() []Partitions {
	if o == nil {
		return nil
	}
	return o.Partitions
}

type DeployConfigData struct {
	ID         *string                 `json:"id,omitempty"`
	Attributes *DeployConfigAttributes `json:"attributes,omitempty"`
}

func (o *DeployConfigData) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DeployConfigData) GetAttributes() *DeployConfigAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

type DeployConfig struct {
	Data *DeployConfigData `json:"data,omitempty"`
}

func (o *DeployConfig) GetData() *DeployConfigData {
	if o == nil {
		return nil
	}
	return o.Data
}

type DeployConfigError struct {
	Data *DeployConfigData `json:"data,omitempty"`
}

var _ error = &DeployConfigError{}

func (e *DeployConfigError) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
