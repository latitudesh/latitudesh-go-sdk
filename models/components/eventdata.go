// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type EventDataType string

const (
	EventDataTypeEvents EventDataType = "events"
)

func (e EventDataType) ToPointer() *EventDataType {
	return &e
}
func (e *EventDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "events":
		*e = EventDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventDataType: %v", v)
	}
}

type Author struct {
	ID    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

func (a *Author) GetID() *string {
	if a == nil {
		return nil
	}
	return a.ID
}

func (a *Author) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Author) GetEmail() *string {
	if a == nil {
		return nil
	}
	return a.Email
}

type EventDataProject struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

func (e *EventDataProject) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EventDataProject) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *EventDataProject) GetSlug() *string {
	if e == nil {
		return nil
	}
	return e.Slug
}

type EventDataTeam struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (e *EventDataTeam) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EventDataTeam) GetName() *string {
	if e == nil {
		return nil
	}
	return e.Name
}

type Target struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (t *Target) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *Target) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}

type EventDataAttributes struct {
	Action    *string           `json:"action,omitempty"`
	CreatedAt *string           `json:"created_at,omitempty"`
	Author    *Author           `json:"author,omitempty"`
	Project   *EventDataProject `json:"project,omitempty"`
	Team      *EventDataTeam    `json:"team,omitempty"`
	Target    *Target           `json:"target,omitempty"`
}

func (e *EventDataAttributes) GetAction() *string {
	if e == nil {
		return nil
	}
	return e.Action
}

func (e *EventDataAttributes) GetCreatedAt() *string {
	if e == nil {
		return nil
	}
	return e.CreatedAt
}

func (e *EventDataAttributes) GetAuthor() *Author {
	if e == nil {
		return nil
	}
	return e.Author
}

func (e *EventDataAttributes) GetProject() *EventDataProject {
	if e == nil {
		return nil
	}
	return e.Project
}

func (e *EventDataAttributes) GetTeam() *EventDataTeam {
	if e == nil {
		return nil
	}
	return e.Team
}

func (e *EventDataAttributes) GetTarget() *Target {
	if e == nil {
		return nil
	}
	return e.Target
}

type EventData struct {
	ID         *string              `json:"id,omitempty"`
	Type       *EventDataType       `json:"type,omitempty"`
	Attributes *EventDataAttributes `json:"attributes,omitempty"`
}

func (e *EventData) GetID() *string {
	if e == nil {
		return nil
	}
	return e.ID
}

func (e *EventData) GetType() *EventDataType {
	if e == nil {
		return nil
	}
	return e.Type
}

func (e *EventData) GetAttributes() *EventDataAttributes {
	if e == nil {
		return nil
	}
	return e.Attributes
}
