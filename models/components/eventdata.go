// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type EventDataType string

const (
	EventDataTypeEvents EventDataType = "events"
)

func (e EventDataType) ToPointer() *EventDataType {
	return &e
}
func (e *EventDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "events":
		*e = EventDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventDataType: %v", v)
	}
}

type EventDataAuthor struct {
	ID    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

func (o *EventDataAuthor) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EventDataAuthor) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EventDataAuthor) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

type EventDataProject struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

func (o *EventDataProject) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EventDataProject) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *EventDataProject) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type EventDataTeam struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *EventDataTeam) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EventDataTeam) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type EventDataTarget struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

func (o *EventDataTarget) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EventDataTarget) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type EventDataAttributes struct {
	Action    *string           `json:"action,omitempty"`
	CreatedAt *string           `json:"created_at,omitempty"`
	Author    *EventDataAuthor  `json:"author,omitempty"`
	Project   *EventDataProject `json:"project,omitempty"`
	Team      *EventDataTeam    `json:"team,omitempty"`
	Target    *EventDataTarget  `json:"target,omitempty"`
}

func (o *EventDataAttributes) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *EventDataAttributes) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EventDataAttributes) GetAuthor() *EventDataAuthor {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *EventDataAttributes) GetProject() *EventDataProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *EventDataAttributes) GetTeam() *EventDataTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *EventDataAttributes) GetTarget() *EventDataTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

type EventData struct {
	ID         *string              `json:"id,omitempty"`
	Type       *EventDataType       `json:"type,omitempty"`
	Attributes *EventDataAttributes `json:"attributes,omitempty"`
}

func (o *EventData) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EventData) GetType() *EventDataType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EventData) GetAttributes() *EventDataAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}
