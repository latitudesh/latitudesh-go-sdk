// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type BillingType string

const (
	BillingTypeYearly  BillingType = "Yearly"
	BillingTypeMonthly BillingType = "Monthly"
	BillingTypeHourly  BillingType = "Hourly"
	BillingTypeNormal  BillingType = "Normal"
)

func (e BillingType) ToPointer() *BillingType {
	return &e
}
func (e *BillingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Yearly":
		fallthrough
	case "Monthly":
		fallthrough
	case "Hourly":
		fallthrough
	case "Normal":
		*e = BillingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingType: %v", v)
	}
}

type BillingMethod string

const (
	BillingMethodNormal                 BillingMethod = "Normal"
	BillingMethodNinetyFivethPercentile BillingMethod = "95th percentile"
)

func (e BillingMethod) ToPointer() *BillingMethod {
	return &e
}
func (e *BillingMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Normal":
		fallthrough
	case "95th percentile":
		*e = BillingMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingMethod: %v", v)
	}
}

type Environment string

const (
	EnvironmentDevelopment Environment = "Development"
	EnvironmentStaging     Environment = "Staging"
	EnvironmentProduction  Environment = "Production"
)

func (e Environment) ToPointer() *Environment {
	return &e
}
func (e *Environment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Development":
		fallthrough
	case "Staging":
		fallthrough
	case "Production":
		*e = Environment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Environment: %v", v)
	}
}

type ProjectStats struct {
	// The number of IP addresses assigned to the project
	IPAddresses *float64 `json:"ip_addresses,omitempty"`
	// The IP address prefixes in the project
	Prefixes *float64 `json:"prefixes,omitempty"`
	// The number of servers assigned to the project
	Servers *float64 `json:"servers,omitempty"`
	// The number of containers assigned to the project
	Containers *float64 `json:"containers,omitempty"`
	// The number of VLANs assigned to the project
	Vlans *float64 `json:"vlans,omitempty"`
}

func (o *ProjectStats) GetIPAddresses() *float64 {
	if o == nil {
		return nil
	}
	return o.IPAddresses
}

func (o *ProjectStats) GetPrefixes() *float64 {
	if o == nil {
		return nil
	}
	return o.Prefixes
}

func (o *ProjectStats) GetServers() *float64 {
	if o == nil {
		return nil
	}
	return o.Servers
}

func (o *ProjectStats) GetContainers() *float64 {
	if o == nil {
		return nil
	}
	return o.Containers
}

func (o *ProjectStats) GetVlans() *float64 {
	if o == nil {
		return nil
	}
	return o.Vlans
}

type ProjectBilling struct {
	SubscriptionID *string `json:"subscription_id,omitempty"`
	Type           *string `json:"type,omitempty"`
	Method         *string `json:"method,omitempty"`
}

func (o *ProjectBilling) GetSubscriptionID() *string {
	if o == nil {
		return nil
	}
	return o.SubscriptionID
}

func (o *ProjectBilling) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ProjectBilling) GetMethod() *string {
	if o == nil {
		return nil
	}
	return o.Method
}

type ProjectAttributes struct {
	// The project name
	Name *string `json:"name,omitempty"`
	// A unique project identifier
	Slug *string `json:"slug,omitempty"`
	// The project description
	Description   *string         `json:"description,omitempty"`
	BillingType   *BillingType    `json:"billing_type,omitempty"`
	BillingMethod *BillingMethod  `json:"billing_method,omitempty"`
	Cost          *string         `json:"cost,omitempty"`
	Environment   *Environment    `json:"environment,omitempty"`
	Stats         *ProjectStats   `json:"stats,omitempty"`
	Billing       *ProjectBilling `json:"billing,omitempty"`
	Team          *TeamInclude    `json:"team,omitempty"`
	CreatedAt     *string         `json:"created_at,omitempty"`
	UpdatedAt     *string         `json:"updated_at,omitempty"`
}

func (o *ProjectAttributes) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ProjectAttributes) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *ProjectAttributes) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ProjectAttributes) GetBillingType() *BillingType {
	if o == nil {
		return nil
	}
	return o.BillingType
}

func (o *ProjectAttributes) GetBillingMethod() *BillingMethod {
	if o == nil {
		return nil
	}
	return o.BillingMethod
}

func (o *ProjectAttributes) GetCost() *string {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *ProjectAttributes) GetEnvironment() *Environment {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *ProjectAttributes) GetStats() *ProjectStats {
	if o == nil {
		return nil
	}
	return o.Stats
}

func (o *ProjectAttributes) GetBilling() *ProjectBilling {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *ProjectAttributes) GetTeam() *TeamInclude {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *ProjectAttributes) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ProjectAttributes) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type Project struct {
	// The project ID
	ID         *string            `json:"id,omitempty"`
	Attributes *ProjectAttributes `json:"attributes,omitempty"`
}

func (o *Project) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Project) GetAttributes() *ProjectAttributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}
